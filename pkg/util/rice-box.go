// Code generated by rice embed-go; DO NOT EDIT.
package util

import (
	"time"

	"github.com/GeertJohan/go.rice/embedded"
)

func init() {

	// define files
	file3 := &embedded.EmbeddedFile{
		Filename:    "agent/check_prereqs.sh",
		FileModTime: time.Unix(1681101988, 0),

		Content: string("#!/bin/sh\nset -x\n\n# Check can sudo without password\nif ! $(sudo ls /tmp/ > /dev/null); then\n\tMSG=\"Unable to successfully use sudo with user $USER on this host.\\nUser $USER must be in sudoers group and using sudo without password must be enabled.\\nPlease see iofog.org documentation for more details.\"\n\techo $MSG\n\texit 1\nfi\n"),
	}
	file4 := &embedded.EmbeddedFile{
		Filename:    "agent/init.sh",
		FileModTime: time.Unix(1735589285, 0),

		Content: string("#!/bin/sh\nset -x\nset -e\n\nget_distribution() {\n\tlsb_dist=\"\"\n\t# Every system that we officially support has /etc/os-release\n\tif [ -r /etc/os-release ]; then\n\t\tlsb_dist=\"$(. /etc/os-release && echo \"$ID\")\"\n\t\tlsb_dist=\"$(echo \"$lsb_dist\" | tr '[:upper:]' '[:lower:]')\"\n\telse\n\t\techo \"Unsupported Linux distribution!\"\n\t\texit 1\n\tfi\n\techo \"# Our distro is $lsb_dist\"\n}\n\n# Check if this is a forked Linux distro\ncheck_forked() {\n\t# Check for lsb_release command existence, it usually exists in forked distros\n\tif command_exists lsb_release; then\n\t\t# Check if the `-u` option is supported\n\t\tset +e\n\t\tlsb_release -a\n\t\tlsb_release_exit_code=$?\n\t\tset -e\n\n\t\t# Check if the command has exited successfully, it means we're in a forked distro\n\t\tif [ \"$lsb_release_exit_code\" = \"0\" ]; then\n\t\t\t# Print info about current distro\n\t\t\tcat <<-EOF\n\t\t\tYou're using '$lsb_dist' version '$dist_version'.\n\t\t\tEOF\n\n\t\t\t# Get the upstream release info\n\t\t\tlsb_dist=$(lsb_release -a 2>&1 | tr '[:upper:]' '[:lower:]' | grep -E 'id' | cut -d ':' -f 2 | tr -d '[:space:]')\n\t\t\tdist_version=$(lsb_release -a 2>&1 | tr '[:upper:]' '[:lower:]' | grep -E 'codename' | cut -d ':' -f 2 | tr -d '[:space:]')\n\n\t\t\t# Print info about upstream distro\n\t\t\tcat <<-EOF\n\t\t\tUpstream release is '$lsb_dist' version '$dist_version'.\n\t\t\tEOF\n\t\telse\n\t\t\tif [ -r /etc/debian_version ] && [ \"$lsb_dist\" != \"ubuntu\" ] && [ \"$lsb_dist\" != \"raspbian\" ]; then\n\t\t\t\tif [ \"$lsb_dist\" = \"osmc\" ]; then\n\t\t\t\t\t# OSMC runs Raspbian\n\t\t\t\t\tlsb_dist=raspbian\n\t\t\t\telse\n\t\t\t\t\t# We're Debian and don't even know it!\n\t\t\t\t\tlsb_dist=debian\n\t\t\t\tfi\n\t\t\t\tdist_version=\"$(sed 's/\\/.*//' /etc/debian_version | sed 's/\\..*//')\"\n\t\t\t\tcase \"$dist_version\" in\n\t\t\t\t\t14)\n\t\t\t\t\t\tdist_version=\"forky\"\n\t\t\t\t\t;;\n\t\t\t\t\t13)\n\t\t\t\t\t\tdist_version=\"trixie\"\n\t\t\t\t\t;;\n\t\t\t\t\t12)\n\t\t\t\t\t\tdist_version=\"bookworm\"\n\t\t\t\t\t;;\n\t\t\t\t\t11)\n\t\t\t\t\t\tdist_version=\"bullseye\"\n\t\t\t\t\t;;\n\t\t\t\t\t10)\n\t\t\t\t\t\tdist_version=\"buster\"\n\t\t\t\t\t;;\n\t\t\t\t\t9)\n\t\t\t\t\t\tdist_version=\"stretch\"\n\t\t\t\t\t;;\n\t\t\t\t\t8|'Kali Linux 2')\n\t\t\t\t\t\tdist_version=\"jessie\"\n\t\t\t\t\t;;\n\t\t\t\t\t7)\n\t\t\t\t\t\tdist_version=\"wheezy\"\n\t\t\t\t\t;;\n\t\t\t\tesac\n\t\t\telif [ -r /etc/redhat-release ] && [ \"$lsb_dist\" = \"\" ]; then\n\t\t\t\tlsb_dist=redhat\n\t\t\tfi\n\t\tfi\n\tfi\n}\n\ncommand_exists() {\n\tcommand -v \"$@\"\n}\n\ninit() {\n\tsh_c='sh -c'\n\tif [ \"$user\" != 'root' ]; then\n\t\tif command_exists sudo; then\n\t\t\tsh_c='sudo -E sh -c'\n\t\telif command_exists su; then\n\t\t\tsh_c='su -c'\n\t\telse\n\t\t\tcat >&2 <<-'EOF'\n\t\t\tError: this installer needs the ability to run commands as root.\n\t\t\tWe are unable to find either \"sudo\" or \"su\" available to make this happen.\n\t\t\tEOF\n\t\t\texit 1\n\t\tfi\n\tfi\n\n\tget_distribution\n\n\tcase \"$lsb_dist\" in\n\n\t\tubuntu)\n\t\t\tif command_exists lsb_release; then\n\t\t\t\tdist_version=\"$(lsb_release --codename | cut -f2)\"\n\t\t\tfi\n\t\t\tif [ -z \"$dist_version\" ] && [ -r /etc/lsb-release ]; then\n\t\t\t\tdist_version=\"$(. /etc/lsb-release && echo \"$DISTRIB_CODENAME\")\"\n\t\t\tfi\n\t\t;;\n\n\t\tdebian|raspbian)\n\t\t\tdist_version=\"$(sed 's/\\/.*//' /etc/debian_version | sed 's/\\..*//')\"\n\t\t\tcase \"$dist_version\" in\n\t\t\t\t10)\n\t\t\t\t\tdist_version=\"buster\"\n\t\t\t\t\t# Avoid https://stackoverflow.com/questions/68802802/repository-http-security-debian-org-debian-security-buster-updates-inrelease\n\t\t\t\t\t$sh_c \"apt-get update --allow-releaseinfo-change\"\n\t\t\t\t;;\n\t\t\t\t9)\n\t\t\t\t\tdist_version=\"stretch\"\n\t\t\t\t;;\n\t\t\t\t8)\n\t\t\t\t\tdist_version=\"jessie\"\n\t\t\t\t;;\n\t\t\t\t7)\n\t\t\t\t\tdist_version=\"wheezy\"\n\t\t\t\t;;\n\t\t\tesac\n\t\t;;\n\n\t\tcentos)\n\t\t\tif [ -z \"$dist_version\" ] && [ -r /etc/os-release ]; then\n\t\t\t\tdist_version=\"$(. /etc/os-release && echo \"$VERSION_ID\")\"\n\t\t\tfi\n\t\t;;\n\n\t\trhel|ol|sles)\n\t\t\tee_notice \"$lsb_dist\"\n\t\t\texit 1\n\t\t\t;;\n\n\t\t*)\n\t\t\tif command_exists lsb_release; then\n\t\t\t\tdist_version=\"$(lsb_release --release | cut -f2)\"\n\t\t\tfi\n\t\t\tif [ -z \"$dist_version\" ] && [ -r /etc/os-release ]; then\n\t\t\t\tdist_version=\"$(. /etc/os-release && echo \"$VERSION_ID\")\"\n\t\t\tfi\n\t\t;;\n\n\tesac\n\n\t# Check if this is a forked Linux distro\n\tcheck_forked\n\n\t# Check if we actually support this configuration\n\tif [ \"$lsb_dist\" = \"redhat\" ]; then\n\t\tcat >&2 <<-'EOF'\n\n\t\tSince Docker Community Edition is not supported for RedHat you have to procceed with installation manually.\n\t\tPlease visit the following URL for more detailed installation instructions:\n\n\t\thttps://iofog.org/install/RHEL\n\n\t\tEOF\n\t\texit 1\n\tfi\n\n}"),
	}
	file5 := &embedded.EmbeddedFile{
		Filename:    "agent/install_deps.sh",
		FileModTime: time.Unix(1733131948, 0),

		Content: string("#!/bin/sh\nset -x\nset -e\n\n/etc/iofog/agent/install_java.sh\n/etc/iofog/agent/install_docker.sh\n"),
	}
	file6 := &embedded.EmbeddedFile{
		Filename:    "agent/install_docker.sh",
		FileModTime: time.Unix(1736464132, 0),

		Content: string("#!/bin/sh\nset -x\nset -e\n\nstart_docker() {\n\tset +e\n\t# check if docker is running\n\tif ! $sh_c \"docker ps\" >/dev/null 2>&1; then\n\t\t# Try init.d\n\t\t$sh_c \"/etc/init.d/docker start\"\n\t\tlocal err_code=$?\n\t\t# Try systemd\n\t\tif [ $err_code -ne 0 ]; then\n\t\t\t$sh_c \"service docker start\"\n\t\t\terr_code=$?\n\t\tfi\n\t\t# Try snapd\n\t\tif [ $err_code -ne 0 ]; then\n\t\t\t$sh_c \"snap docker start\"\n\t\t\terr_code=$?\n\t\tfi\n\t\tif [ $err_code -ne 0 ]; then\n\t\t\techo \"Could not start Docker daemon\"\n\t\t\texit 1\n\t\tfi\n\tfi\n\tset -e\n}\n\ndo_configure_overlay() {\n\tlocal driver=\"$DOCKER_STORAGE_DRIVER\"\n\tif [ -z \"$driver\" ]; then\n\t\tdriver=\"overlayfs\"\n\tfi\n\techo \"# Configuring /etc/systemd/system/docker.service.d/overlay.conf...\"\n\tif [ \"$lsb_dist\" = \"raspbian\" ] || [ \"$(uname -m)\" = \"armv7l\" ] || [ \"$(uname -m)\" = \"aarch64\" ] || [ \"$(uname -m)\" = \"armv8\" ]; then\n\t\tif [ ! -d \"/etc/systemd/system/docker.service.d\" ]; then\n\t\t\t$sh_c \"mkdir -p /etc/systemd/system/docker.service.d\"\n\t\tfi\n\t\tif [ ! -f \"/etc/systemd/system/docker.service.d/overlay.conf\" ] || ! grep -Fxq \"ExecStart=/usr/bin/dockerd --storage-driver $driver \" \"/etc/systemd/system/docker.service.d/overlay.conf\"; then\n\t\t\t$sh_c 'echo \"[Service]\" > /etc/systemd/system/docker.service.d/overlay.conf'\n\t\t\t$sh_c 'echo \"ExecStart=\" >> /etc/systemd/system/docker.service.d/overlay.conf'\n\t\t\t$sh_c \"echo \\\"ExecStart=/usr/bin/dockerd --storage-driver $driver \\\" >> /etc/systemd/system/docker.service.d/overlay.conf\"\n\t\tfi\n\t\t$sh_c \"systemctl daemon-reload\"\n\t\t$sh_c \"service docker restart\"\n\tfi\n}\n\ndo_modify_daemon() {\n\tif [ ! -f /etc/docker/daemon.json ]; then\n\t\techo \"Creating /etc/docker/daemon.json...\"\n\t\tsudo tee /etc/docker/daemon.json > /dev/null <<EOF\n{\n\t\"features\": {\n\t\t\"containerd-snapshotter\": true,\n\t\t\"cdi\": true\n\t},\n\t\"cdi-spec-dirs\": [\"/etc/cdi/\", \"/var/run/cdi\"]\n}\nEOF\n\telse\n\t\techo \"/etc/docker/daemon.json already exists\"\n\tfi\n\techo \"Restarting Docker daemon...\"\n\t$sh_c \"systemctl daemon-reload\"\n\t$sh_c \"service docker restart\"\n}\n\ndo_set_datasance_repo() {\n\n    echo $lsb_dist\n\tif [ \"$lsb_dist\" = \"fedora\" ] || [ \"$lsb_dist\" = \"centos\" ]; then\n\n\t\tcd /etc/yum.repos.d ; curl https://downloads.datasance.com/datasance.repo -LO\n\t\t$sh_c \"yum update\"\n\telse\n\t$sh_c \"apt update -qy\"\n    $sh_c \"apt install -qy debian-archive-keyring\"\n    $sh_c \"apt install -qy apt-transport-https\"\n\tsudo wget -qO- https://downloads.datasance.com/datasance.gpg | sudo tee /etc/apt/trusted.gpg.d/datasance.gpg >/dev/null\n\techo \"deb [arch=all signed-by=/etc/apt/trusted.gpg.d/datasance.gpg] https://downloads.datasance.com/deb stable main\" | sudo tee /etc/apt/sources.list.d/datansance.list >/dev/null\n    $sh_c \"apt update -qy\"\n\tfi\n\n}\n\ndo_install_wasm_shim() {\n    echo \"Detected OS: $lsb_dist\"\n    arch=$(uname -m)\n\n    # Normalize architecture for consistency\n    case \"$arch\" in\n        arm64|aarch64|armv7l|armv8) arch=\"aarch64\" ;;\n        amd64|x86_64) arch=\"x86_64\" ;;\n    esac\n\n    if [ \"$lsb_dist\" = \"fedora\" ] || [ \"$lsb_dist\" = \"centos\" ]; then\n        $sh_c \"yum update -y\" || { echo \"Failed to update yum packages\"; exit 1; }\n\n        if [ \"$arch\" = \"aarch64\" ]; then\n            $sh_c \"yum install -y containerd-shim-wasmedge-v1-aarch64-linux-gnu\"\n            $sh_c \"yum install -y containerd-shim-wasmer-v1-aarch64-linux-gnu\"\n            $sh_c \"yum install -y containerd-shim-wasmtime-v1-aarch64-linux-gnu\"\n        elif [ \"$arch\" = \"x86_64\" ]; then\n            $sh_c \"yum install -y containerd-shim-wasmedge-v1-x86_64-linux-gnu\"\n            $sh_c \"yum install -y containerd-shim-wasmer-v1-x86_64-linux-gnu\"\n            $sh_c \"yum install -y containerd-shim-wasmtime-v1-x86_64-linux-gnu\"\n        else\t\t\t\t\t\t\n            echo \"Unsupported architecture: $arch for Fedora/CentOS\"\n            exit 1\n        fi\n    elif [ \"$lsb_dist\" = \"debian\" ] || [ \"$lsb_dist\" = \"raspbian\" ] || [ \"$lsb_dist\" = \"ubuntu\" ]; then\n        $sh_c \"apt update -qy\" || { echo \"Failed to update apt packages\"; exit 1; }\n\n        if [ \"$arch\" = \"aarch64\" ]; then\n            $sh_c \"apt install -qy containerd-shim-wasmedge-v1-aarch64-linux-gnu\"\n            $sh_c \"apt install -qy containerd-shim-wasmer-v1-aarch64-linux-gnu\"\n            $sh_c \"apt install -qy containerd-shim-wasmtime-v1-aarch64-linux-gnu\"\n        elif [ \"$arch\" = \"x86_64\" ]; then\n            $sh_c \"apt install -qy containerd-shim-wasmedge-v1-x86-64-linux-gnu\"\n            $sh_c \"apt install -qy containerd-shim-wasmer-v1-x86-64-linux-gnu\"\n            $sh_c \"apt install -qy containerd-shim-wasmtime-v1-x86-64-linux-gnu\"\n        else\n            echo \"Unsupported architecture: $arch for Debian/Ubuntu\"\n            exit 1\n        fi\n    else\n        echo \"Unsupported OS: $lsb_dist\"\n        exit 1\n    fi\n}\n\ndo_install_docker() {\n\t# Check that Docker 25.0.0 or greater is installed\n\tif command_exists docker; then\n\t\tdocker_version=$(docker -v | sed 's/.*version \\(.*\\),.*/\\1/' | tr -d '.')\n\t\tif [ \"$docker_version\" -ge 2600 ]; then\n\t\t\techo \"# Docker $docker_version already installed\"\n\t\t\tstart_docker\n\t\t\tdo_configure_overlay\n\t\t\tdo_modify_daemon\n\t\t\treturn\n\t\tfi\n\tfi\n\techo \"# Installing Docker...\"\n\tcase \"$dist_version\" in\n\t\t\"stretch\")\n\t\t\t$sh_c \"apt install -y apt-transport-https ca-certificates curl gnupg2 software-properties-common\"\n\t\t\tcurl -fsSL https://download.docker.com/linux/debian/gpg | $sh_c \"apt-key add -\"\n\t\t\t$sh_c \"sudo add-apt-repository \\\"deb [arch=$(dpkg --print-architecture) https://download.docker.com/linux/debian $(lsb_release -cs) stable\\\"\"\n\t\t\t$sh_c \"apt-get update -y\"\n\t\t\t$sh_c \"sudo apt install -y docker-ce\"\n\t\t;;\n    7|8)\n      $sh_c \"sudo yum install -y yum-utils || echo 'yum-utils already installed'\"\n      $sh_c \"sudo yum-config-manager \\\n            --add-repo \\\n            https://download.docker.com/linux/centos/docker-ce.repo\"\n      $sh_c \"sudo yum install docker-ce docker-ce-cli containerd.io -y\"\n    ;;\n\t\t*)\n\t\t\tcurl -fsSL https://get.docker.com/ | sh\n\t\t;;\n\tesac\n\t\n\tif ! command_exists docker; then\n\t\techo \"Failed to install Docker\"\n\t\texit 1\n\tfi\n\tstart_docker\n\tdo_configure_overlay\n\tdo_modify_daemon\n}\n\n. /etc/iofog/agent/init.sh\ninit\ndo_install_docker\ndo_set_datasance_repo\ndo_install_wasm_shim\n"),
	}
	file7 := &embedded.EmbeddedFile{
		Filename:    "agent/install_iofog.sh",
		FileModTime: time.Unix(1738603394, 0),

		Content: string("#!/bin/sh\nset -x\nset -e\n\ndo_check_install() {\n\tif command_exists iofog-agent; then\n\t\tlocal VERSION=$(sudo iofog-agent version | head -n1 | sed \"s/ioFog//g\" | tr -d ' ' | tr -d \"\\n\")\n\t\tif [ \"$VERSION\" = \"$agent_version\" ]; then\n\t\t\techo \"Agent $VERSION already installed.\"\n\t\t\texit 0\n\t\tfi\n\tfi\n}\n\ndo_stop_iofog() {\n\tif command_exists iofog-agent; then\n\t\tsudo service iofog-agent stop\n\tfi\n}\n\n# do_check_iofog_on_arm() {\n#   if [ \"$lsb_dist\" = \"raspbian\" ] || [ \"$(uname -m)\" = \"armv7l\" ] || [ \"$(uname -m)\" = \"aarch64\" ] || [ \"$(uname -m)\" = \"armv8\" ]; then\n#     echo \"# We re on ARM ($(uname -m)) : Updating config.xml to use correct docker_url\"\n#     $sh_c 'sed -i -e \"s|<docker_url>.*</docker_url>|<docker_url>tcp://127.0.0.1:2375/</docker_url>|g\" /etc/iofog-agent/config.xml'\n\n#     echo \"# Restarting iofog-agent service\"\n#     $sh_c \"service iofog-agent stop\"\n#     sleep 3\n#     $sh_c \"service iofog-agent start\"\n#  fi\n# }\n\ndo_install_iofog() {\n\tAGENT_CONFIG_FOLDER=/etc/iofog-agent\n\tSAVED_AGENT_CONFIG_FOLDER=/tmp/agent-config-save\n\t# PACKAGE_CLOUD_SCRIPT=package_cloud.sh\n\techo \"# Installing ioFog agent...\"\n\n\t# Save iofog-agent config\n\tif [ -d ${AGENT_CONFIG_FOLDER} ]; then\n\t\tsudo rm -rf ${SAVED_AGENT_CONFIG_FOLDER}\n\t\tsudo mkdir -p ${SAVED_AGENT_CONFIG_FOLDER}\n\t\tsudo cp -r ${AGENT_CONFIG_FOLDER}/* ${SAVED_AGENT_CONFIG_FOLDER}/\n\tfi\n\n\t#prefix=$([ -z \"$token\" ] && echo \"\" || echo \"$token:@\")\n\techo $lsb_dist\n\tif [ \"$lsb_dist\" = \"fedora\" ] || [ \"$lsb_dist\" = \"centos\" ]; then\n\n\t\t$sh_c \"yum update\"\n\t\t$sh_c \"yum install -y iofog-agent-$agent_version-1.noarch\"\n\telse\n    $sh_c \"apt update -qy\"\n    $sh_c \"apt install --allow-downgrades iofog-agent=$agent_version -qy\"\n\tfi\n\t# do_check_iofog_on_arm\n\n\t# Restore iofog-agent config\n\tif [ -d ${SAVED_AGENT_CONFIG_FOLDER} ]; then\n\t\tsudo mv ${SAVED_AGENT_CONFIG_FOLDER}/* ${AGENT_CONFIG_FOLDER}/\n\t\tsudo rmdir ${SAVED_AGENT_CONFIG_FOLDER}\n\tfi\n\tsudo chmod 775 ${AGENT_CONFIG_FOLDER}\n}\n\ndo_start_iofog(){\n\t# shellcheck disable=SC2261\n\tsudo service iofog-agent start > /dev/null 2&>1 &\n\tlocal STATUS=\"\"\n\tlocal ITER=0\n\twhile [ \"$STATUS\" != \"RUNNING\" ] ; do\n    ITER=$((ITER+1))\n    if [ \"$ITER\" -gt 60 ]; then\n      echo 'Timed out waiting for Agent to be RUNNING'\n      exit 1;\n    fi\n    sleep 1\n    STATUS=$(sudo iofog-agent status | cut -f2 -d: | head -n 1 | tr -d '[:space:]')\n    echo \"${STATUS}\"\n\tdone\n\tsudo iofog-agent \"config -cf 10 -sf 10\"\n}\n\nagent_version=\"$1\"\necho \"Using variables\"\necho \"version: $agent_version\"\n\n. /etc/iofog/agent/init.sh\ninit\ndo_check_install\ndo_stop_iofog\ndo_install_iofog\ndo_start_iofog"),
	}
	file8 := &embedded.EmbeddedFile{
		Filename:    "agent/install_java.sh",
		FileModTime: time.Unix(1712146470, 0),

		Content: string("#!/bin/sh\nset -x\nset -e\n\njava_major_version=0\njava_minor_version=0\ndo_check_install() {\n\tif command_exists java; then\n        java_major_version=\"$(java --version | head -n1 | awk '{print $2}' | cut -d. -f1)\"\n        java_minor_version=\"$(java --version | head -n1 | awk '{print $2}' | cut -d. -f2)\"\n\tfi\n\tif [ \"$java_major_version\" -ge \"17\" ]  && [ \"$java_minor_version\" -ge \"0\" ]; then\n\t\techo \"Java $java_major_version.$java_minor_version  already installed.\"\n\t\texit 0\n\tfi\n}\n\ndo_install_java() {\n\techo \"# Installing java 17...\"\n\techo \"\"\n\tos_arch=$(getconf LONG_BIT)\n\tis_arm=\"\"\n\tif [ \"$lsb_dist\" = \"raspbian\" ] || [ \"$(uname -m)\" = \"armv7l\" ] || [ \"$(uname -m)\" = \"aarch64\" ] || [ \"$(uname -m)\" = \"armv8\" ]; then\n\t\tis_arm=\"-arm\"\n\tfi\n\tcase \"$lsb_dist\" in\n\t\tubuntu)\n\t\t\t$sh_c \"apt-get update -y\"\n\t\t\t$sh_c \"apt install -y openjdk-17-jdk\"\n\t\t;;\n\t\tdebian|mendel)\n\t\t\t$sh_c \"apt-get update\"\n\t\t\t$sh_c \"apt install -y openjdk-17-jdk\"\n\t\t;;\n\t\traspbian)\n\t\t  $sh_c \"apt-get update\"\n\t\t  $sh_c \"apt-get install openjdk-17-jdk -y\"\n\t\t;;\n\t\tfedora|centos)\n\t\t\t$sh_c \"yum install -y java-17-openjdk\"\n\t\t;;\n\tesac\n}\n\ndo_install_deps() {\n\tlocal installer=\"\"\n\tcase \"$lsb_dist\" in\n\t\tubuntu|debian|raspbian)\n\t\t\tinstaller=\"apt\"\n\t\t;;\n\t\tfedora|centos)\n\t\t\tinstaller=\"yum\"\n\t\t;;\n\tesac\n\n\tlocal iter=0\n\twhile ! $sh_c \"$installer update\" && [ \"$iter\" -lt 6 ]; do\n\t\tsleep 5\n\t\titer=$((iter+1))\n\tdone\n}\n\n. /etc/iofog/agent/init.sh\ninit\ndo_check_install\ndo_install_deps\ndo_install_java"),
	}
	file9 := &embedded.EmbeddedFile{
		Filename:    "agent/uninstall_iofog.sh",
		FileModTime: time.Unix(1681101988, 0),

		Content: string("#!/bin/sh\nset -x\nset -e\n\nAGENT_CONFIG_FOLDER=/etc/iofog-agent/\nAGENT_LOG_FOLDER=/var/log/iofog-agent/\n\ndo_uninstall_iofog() {\n\techo \"# Removing ioFog agent...\"\n\n\tcase \"$lsb_dist\" in\n\t\tubuntu)\n\t\t\t$sh_c \"apt-get -y --purge autoremove iofog-agent\"\n\t\t\t;;\n\t\tfedora|centos)\n\t\t\t$sh_c \"yum remove -y iofog-agent\"\n\t\t\t;;\n\t\tdebian|raspbian)\n\t\t\t$sh_c \"apt-get -y --purge autoremove iofog-agent\"\n\t\t\t;;\n\tesac\n\n\t# Remove config files\n\t$sh_c \"rm -rf ${AGENT_CONFIG_FOLDER}\"\n\n\t# Remove log files\n\t$sh_c \"rm -rf ${AGENT_LOG_FOLDER}\"\n}\n\n. /etc/iofog/agent/init.sh\ninit\n\ndo_uninstall_iofog"),
	}
	fileb := &embedded.EmbeddedFile{
		Filename:    "container-agent/check_prereqs.sh",
		FileModTime: time.Unix(1738603394, 0),

		Content: string("#!/bin/sh\nset -x\n\n# Check can sudo without password\nif ! $(sudo ls /tmp/ > /dev/null); then\n\tMSG=\"Unable to successfully use sudo with user $USER on this host.\\nUser $USER must be in sudoers group and using sudo without password must be enabled.\\nPlease see iofog.org documentation for more details.\"\n\techo $MSG\n\texit 1\nfi\n"),
	}
	filec := &embedded.EmbeddedFile{
		Filename:    "container-agent/init.sh",
		FileModTime: time.Unix(1738603394, 0),

		Content: string("#!/bin/sh\nset -x\nset -e\n\nget_distribution() {\n\tlsb_dist=\"\"\n\t# Every system that we officially support has /etc/os-release\n\tif [ -r /etc/os-release ]; then\n\t\tlsb_dist=\"$(. /etc/os-release && echo \"$ID\")\"\n\t\tlsb_dist=\"$(echo \"$lsb_dist\" | tr '[:upper:]' '[:lower:]')\"\n\telse\n\t\techo \"Unsupported Linux distribution!\"\n\t\texit 1\n\tfi\n\techo \"# Our distro is $lsb_dist\"\n}\n\n# Check if this is a forked Linux distro\ncheck_forked() {\n\t# Check for lsb_release command existence, it usually exists in forked distros\n\tif command_exists lsb_release; then\n\t\t# Check if the `-u` option is supported\n\t\tset +e\n\t\tlsb_release -a\n\t\tlsb_release_exit_code=$?\n\t\tset -e\n\n\t\t# Check if the command has exited successfully, it means we're in a forked distro\n\t\tif [ \"$lsb_release_exit_code\" = \"0\" ]; then\n\t\t\t# Print info about current distro\n\t\t\tcat <<-EOF\n\t\t\tYou're using '$lsb_dist' version '$dist_version'.\n\t\t\tEOF\n\n\t\t\t# Get the upstream release info\n\t\t\tlsb_dist=$(lsb_release -a 2>&1 | tr '[:upper:]' '[:lower:]' | grep -E 'id' | cut -d ':' -f 2 | tr -d '[:space:]')\n\t\t\tdist_version=$(lsb_release -a 2>&1 | tr '[:upper:]' '[:lower:]' | grep -E 'codename' | cut -d ':' -f 2 | tr -d '[:space:]')\n\n\t\t\t# Print info about upstream distro\n\t\t\tcat <<-EOF\n\t\t\tUpstream release is '$lsb_dist' version '$dist_version'.\n\t\t\tEOF\n\t\telse\n\t\t\tif [ -r /etc/debian_version ] && [ \"$lsb_dist\" != \"ubuntu\" ] && [ \"$lsb_dist\" != \"raspbian\" ]; then\n\t\t\t\tif [ \"$lsb_dist\" = \"osmc\" ]; then\n\t\t\t\t\t# OSMC runs Raspbian\n\t\t\t\t\tlsb_dist=raspbian\n\t\t\t\telse\n\t\t\t\t\t# We're Debian and don't even know it!\n\t\t\t\t\tlsb_dist=debian\n\t\t\t\tfi\n\t\t\t\tdist_version=\"$(sed 's/\\/.*//' /etc/debian_version | sed 's/\\..*//')\"\n\t\t\t\tcase \"$dist_version\" in\n\t\t\t\t\t14)\n\t\t\t\t\t\tdist_version=\"forky\"\n\t\t\t\t\t;;\n\t\t\t\t\t13)\n\t\t\t\t\t\tdist_version=\"trixie\"\n\t\t\t\t\t;;\n\t\t\t\t\t12)\n\t\t\t\t\t\tdist_version=\"bookworm\"\n\t\t\t\t\t;;\n\t\t\t\t\t11)\n\t\t\t\t\t\tdist_version=\"bullseye\"\n\t\t\t\t\t;;\n\t\t\t\t\t10)\n\t\t\t\t\t\tdist_version=\"buster\"\n\t\t\t\t\t;;\n\t\t\t\t\t9)\n\t\t\t\t\t\tdist_version=\"stretch\"\n\t\t\t\t\t;;\n\t\t\t\t\t8|'Kali Linux 2')\n\t\t\t\t\t\tdist_version=\"jessie\"\n\t\t\t\t\t;;\n\t\t\t\t\t7)\n\t\t\t\t\t\tdist_version=\"wheezy\"\n\t\t\t\t\t;;\n\t\t\t\tesac\n\t\t\telif [ -r /etc/redhat-release ] && [ \"$lsb_dist\" = \"\" ]; then\n\t\t\t\tlsb_dist=redhat\n\t\t\tfi\n\t\tfi\n\tfi\n}\n\ncommand_exists() {\n\tcommand -v \"$@\"\n}\n\ninit() {\n\tsh_c='sh -c'\n\tif [ \"$user\" != 'root' ]; then\n\t\tif command_exists sudo; then\n\t\t\tsh_c='sudo -E sh -c'\n\t\telif command_exists su; then\n\t\t\tsh_c='su -c'\n\t\telse\n\t\t\tcat >&2 <<-'EOF'\n\t\t\tError: this installer needs the ability to run commands as root.\n\t\t\tWe are unable to find either \"sudo\" or \"su\" available to make this happen.\n\t\t\tEOF\n\t\t\texit 1\n\t\tfi\n\tfi\n\n\tget_distribution\n\n\tcase \"$lsb_dist\" in\n\n\t\tubuntu)\n\t\t\tif command_exists lsb_release; then\n\t\t\t\tdist_version=\"$(lsb_release --codename | cut -f2)\"\n\t\t\tfi\n\t\t\tif [ -z \"$dist_version\" ] && [ -r /etc/lsb-release ]; then\n\t\t\t\tdist_version=\"$(. /etc/lsb-release && echo \"$DISTRIB_CODENAME\")\"\n\t\t\tfi\n\t\t;;\n\n\t\tdebian|raspbian)\n\t\t\tdist_version=\"$(sed 's/\\/.*//' /etc/debian_version | sed 's/\\..*//')\"\n\t\t\tcase \"$dist_version\" in\n\t\t\t\t10)\n\t\t\t\t\tdist_version=\"buster\"\n\t\t\t\t\t# Avoid https://stackoverflow.com/questions/68802802/repository-http-security-debian-org-debian-security-buster-updates-inrelease\n\t\t\t\t\t$sh_c \"apt-get update --allow-releaseinfo-change\"\n\t\t\t\t;;\n\t\t\t\t9)\n\t\t\t\t\tdist_version=\"stretch\"\n\t\t\t\t;;\n\t\t\t\t8)\n\t\t\t\t\tdist_version=\"jessie\"\n\t\t\t\t;;\n\t\t\t\t7)\n\t\t\t\t\tdist_version=\"wheezy\"\n\t\t\t\t;;\n\t\t\tesac\n\t\t;;\n\n\t\tcentos)\n\t\t\tif [ -z \"$dist_version\" ] && [ -r /etc/os-release ]; then\n\t\t\t\tdist_version=\"$(. /etc/os-release && echo \"$VERSION_ID\")\"\n\t\t\tfi\n\t\t;;\n\n\t\trhel|ol|sles)\n\t\t\tee_notice \"$lsb_dist\"\n\t\t\texit 1\n\t\t\t;;\n\n\t\t*)\n\t\t\tif command_exists lsb_release; then\n\t\t\t\tdist_version=\"$(lsb_release --release | cut -f2)\"\n\t\t\tfi\n\t\t\tif [ -z \"$dist_version\" ] && [ -r /etc/os-release ]; then\n\t\t\t\tdist_version=\"$(. /etc/os-release && echo \"$VERSION_ID\")\"\n\t\t\tfi\n\t\t;;\n\n\tesac\n\n\t# Check if this is a forked Linux distro\n\tcheck_forked\n\n\t# Check if we actually support this configuration\n\tif [ \"$lsb_dist\" = \"redhat\" ]; then\n\t\tcat >&2 <<-'EOF'\n\n\t\tSince Docker Community Edition is not supported for RedHat you have to procceed with installation manually.\n\t\tPlease visit the following URL for more detailed installation instructions:\n\n\t\thttps://iofog.org/install/RHEL\n\n\t\tEOF\n\t\texit 1\n\tfi\n\n}"),
	}
	filed := &embedded.EmbeddedFile{
		Filename:    "container-agent/install_deps.sh",
		FileModTime: time.Unix(1738603394, 0),

		Content: string("#!/bin/sh\nset -x\nset -e\n\n\n/etc/iofog/agent/install_docker.sh\n"),
	}
	filee := &embedded.EmbeddedFile{
		Filename:    "container-agent/install_docker.sh",
		FileModTime: time.Unix(1738603394, 0),

		Content: string("#!/bin/sh\nset -x\nset -e\n\nstart_docker() {\n\tset +e\n\t# check if docker is running\n\tif ! $sh_c \"docker ps\" >/dev/null 2>&1; then\n\t\t# Try init.d\n\t\t$sh_c \"/etc/init.d/docker start\"\n\t\tlocal err_code=$?\n\t\t# Try systemd\n\t\tif [ $err_code -ne 0 ]; then\n\t\t\t$sh_c \"service docker start\"\n\t\t\terr_code=$?\n\t\tfi\n\t\t# Try snapd\n\t\tif [ $err_code -ne 0 ]; then\n\t\t\t$sh_c \"snap docker start\"\n\t\t\terr_code=$?\n\t\tfi\n\t\tif [ $err_code -ne 0 ]; then\n\t\t\techo \"Could not start Docker daemon\"\n\t\t\texit 1\n\t\tfi\n\tfi\n\tset -e\n}\n\ndo_configure_overlay() {\n\tlocal driver=\"$DOCKER_STORAGE_DRIVER\"\n\tif [ -z \"$driver\" ]; then\n\t\tdriver=\"overlayfs\"\n\tfi\n\techo \"# Configuring /etc/systemd/system/docker.service.d/overlay.conf...\"\n\tif [ \"$lsb_dist\" = \"raspbian\" ] || [ \"$(uname -m)\" = \"armv7l\" ] || [ \"$(uname -m)\" = \"aarch64\" ] || [ \"$(uname -m)\" = \"armv8\" ]; then\n\t\tif [ ! -d \"/etc/systemd/system/docker.service.d\" ]; then\n\t\t\t$sh_c \"mkdir -p /etc/systemd/system/docker.service.d\"\n\t\tfi\n\t\tif [ ! -f \"/etc/systemd/system/docker.service.d/overlay.conf\" ] || ! grep -Fxq \"ExecStart=/usr/bin/dockerd --storage-driver $driver \" \"/etc/systemd/system/docker.service.d/overlay.conf\"; then\n\t\t\t$sh_c 'echo \"[Service]\" > /etc/systemd/system/docker.service.d/overlay.conf'\n\t\t\t$sh_c 'echo \"ExecStart=\" >> /etc/systemd/system/docker.service.d/overlay.conf'\n\t\t\t$sh_c \"echo \\\"ExecStart=/usr/bin/dockerd --storage-driver $driver \\\" >> /etc/systemd/system/docker.service.d/overlay.conf\"\n\t\tfi\n\t\t$sh_c \"systemctl daemon-reload\"\n\t\t$sh_c \"service docker restart\"\n\tfi\n}\n\ndo_modify_daemon() {\n\tif [ ! -f /etc/docker/daemon.json ]; then\n\t\techo \"Creating /etc/docker/daemon.json...\"\n\t\tsudo tee /etc/docker/daemon.json > /dev/null <<EOF\n{\n\t\"features\": {\n\t\t\"containerd-snapshotter\": true,\n\t\t\"cdi\": true\n\t},\n\t\"cdi-spec-dirs\": [\"/etc/cdi/\", \"/var/run/cdi\"]\n}\nEOF\n\telse\n\t\techo \"/etc/docker/daemon.json already exists\"\n\tfi\n\techo \"Restarting Docker daemon...\"\n\t$sh_c \"systemctl daemon-reload\"\n\t$sh_c \"service docker restart\"\n}\n\ndo_set_datasance_repo() {\n\n    echo $lsb_dist\n\tif [ \"$lsb_dist\" = \"fedora\" ] || [ \"$lsb_dist\" = \"centos\" ]; then\n\n\t\tcd /etc/yum.repos.d ; curl https://downloads.datasance.com/datasance.repo -LO\n\t\t$sh_c \"yum update\"\n\telse\n\t$sh_c \"apt update -qy\"\n    $sh_c \"apt install -qy debian-archive-keyring\"\n    $sh_c \"apt install -qy apt-transport-https\"\n\tsudo wget -qO- https://downloads.datasance.com/datasance.gpg | sudo tee /etc/apt/trusted.gpg.d/datasance.gpg >/dev/null\n\techo \"deb [arch=all signed-by=/etc/apt/trusted.gpg.d/datasance.gpg] https://downloads.datasance.com/deb stable main\" | sudo tee /etc/apt/sources.list.d/datansance.list >/dev/null\n    $sh_c \"apt update -qy\"\n\tfi\n\n}\n\ndo_install_wasm_shim() {\n    echo \"Detected OS: $lsb_dist\"\n    arch=$(uname -m)\n\n    # Normalize architecture for consistency\n    case \"$arch\" in\n        arm64|aarch64|armv7l|armv8) arch=\"aarch64\" ;;\n        amd64|x86_64) arch=\"x86_64\" ;;\n    esac\n\n    if [ \"$lsb_dist\" = \"fedora\" ] || [ \"$lsb_dist\" = \"centos\" ]; then\n        $sh_c \"yum update -y\" || { echo \"Failed to update yum packages\"; exit 1; }\n\n        if [ \"$arch\" = \"aarch64\" ]; then\n            $sh_c \"yum install -y containerd-shim-wasmedge-v1-aarch64-linux-gnu\"\n            $sh_c \"yum install -y containerd-shim-wasmer-v1-aarch64-linux-gnu\"\n            $sh_c \"yum install -y containerd-shim-wasmtime-v1-aarch64-linux-gnu\"\n        elif [ \"$arch\" = \"x86_64\" ]; then\n            $sh_c \"yum install -y containerd-shim-wasmedge-v1-x86_64-linux-gnu\"\n            $sh_c \"yum install -y containerd-shim-wasmer-v1-x86_64-linux-gnu\"\n            $sh_c \"yum install -y containerd-shim-wasmtime-v1-x86_64-linux-gnu\"\n        else\t\t\t\t\t\t\n            echo \"Unsupported architecture: $arch for Fedora/CentOS\"\n            exit 1\n        fi\n    elif [ \"$lsb_dist\" = \"debian\" ] || [ \"$lsb_dist\" = \"raspbian\" ] || [ \"$lsb_dist\" = \"ubuntu\" ]; then\n        $sh_c \"apt update -qy\" || { echo \"Failed to update apt packages\"; exit 1; }\n\n        if [ \"$arch\" = \"aarch64\" ]; then\n            $sh_c \"apt install -qy containerd-shim-wasmedge-v1-aarch64-linux-gnu\"\n            $sh_c \"apt install -qy containerd-shim-wasmer-v1-aarch64-linux-gnu\"\n            $sh_c \"apt install -qy containerd-shim-wasmtime-v1-aarch64-linux-gnu\"\n        elif [ \"$arch\" = \"x86_64\" ]; then\n            $sh_c \"apt install -qy containerd-shim-wasmedge-v1-x86-64-linux-gnu\"\n            $sh_c \"apt install -qy containerd-shim-wasmer-v1-x86-64-linux-gnu\"\n            $sh_c \"apt install -qy containerd-shim-wasmtime-v1-x86-64-linux-gnu\"\n        else\n            echo \"Unsupported architecture: $arch for Debian/Ubuntu\"\n            exit 1\n        fi\n    else\n        echo \"Unsupported OS: $lsb_dist\"\n        exit 1\n    fi\n}\n\ndo_install_docker() {\n\t# Check that Docker 25.0.0 or greater is installed\n\tif command_exists docker; then\n\t\tdocker_version=$(docker -v | sed 's/.*version \\(.*\\),.*/\\1/' | tr -d '.')\n\t\tif [ \"$docker_version\" -ge 2600 ]; then\n\t\t\techo \"# Docker $docker_version already installed\"\n\t\t\tstart_docker\n\t\t\tdo_configure_overlay\n\t\t\tdo_modify_daemon\n\t\t\treturn\n\t\tfi\n\tfi\n\techo \"# Installing Docker...\"\n\tcase \"$dist_version\" in\n\t\t\"stretch\")\n\t\t\t$sh_c \"apt install -y apt-transport-https ca-certificates curl gnupg2 software-properties-common\"\n\t\t\tcurl -fsSL https://download.docker.com/linux/debian/gpg | $sh_c \"apt-key add -\"\n\t\t\t$sh_c \"sudo add-apt-repository \\\"deb [arch=$(dpkg --print-architecture) https://download.docker.com/linux/debian $(lsb_release -cs) stable\\\"\"\n\t\t\t$sh_c \"apt-get update -y\"\n\t\t\t$sh_c \"sudo apt install -y docker-ce\"\n\t\t;;\n    7|8)\n      $sh_c \"sudo yum install -y yum-utils || echo 'yum-utils already installed'\"\n      $sh_c \"sudo yum-config-manager \\\n            --add-repo \\\n            https://download.docker.com/linux/centos/docker-ce.repo\"\n      $sh_c \"sudo yum install docker-ce docker-ce-cli containerd.io -y\"\n    ;;\n\t\t*)\n\t\t\tcurl -fsSL https://get.docker.com/ | sh\n\t\t;;\n\tesac\n\t\n\tif ! command_exists docker; then\n\t\techo \"Failed to install Docker\"\n\t\texit 1\n\tfi\n\tstart_docker\n\tdo_configure_overlay\n\tdo_modify_daemon\n}\n\n. /etc/iofog/agent/init.sh\ninit\ndo_install_docker\ndo_set_datasance_repo\ndo_install_wasm_shim\n"),
	}
	filef := &embedded.EmbeddedFile{
		Filename:    "container-agent/install_iofog.sh",
		FileModTime: time.Unix(1740418815, 0),

		Content: string("#!/bin/sh\nset -x\nset -e\n\nAGENT_LOG_FOLDER=/var/log/iofog-agent\nAGENT_BACKUP_FOLDER=/var/backups/iofog-agent\nAGENT_MESSAGE_FOLDER=/var/lib/iofog-agent\nSAVED_AGENT_CONFIG_FOLDER=/tmp/agent-config-save\nAGENT_CONTAINER_NAME=\"iofog-agent\"\nETC_DIR=/etc/iofog/agent\n\ndo_check_install() {\n\tif command_exists iofog-agent; then\n\t\tlocal VERSION=$(sudo iofog-agent version | head -n1 | sed \"s/ioFog//g\" | tr -d ' ' | tr -d \"\\n\")\n\t\tif [ \"$VERSION\" = \"$agent_version\" ]; then\n\t\t\techo \"Agent $VERSION already installed.\"\n\t\t\texit 0\n\t\tfi\n\tfi\n}\n\ndo_stop_iofog() {\n\tif command_exists iofog-agent; then\n\t\tsudo service iofog-agent stop\n\tfi\n}\n\n# do_check_iofog_on_arm() {\n#   if [ \"$lsb_dist\" = \"raspbian\" ] || [ \"$(uname -m)\" = \"armv7l\" ] || [ \"$(uname -m)\" = \"aarch64\" ] || [ \"$(uname -m)\" = \"armv8\" ]; then\n#     echo \"# We re on ARM ($(uname -m)) : Updating config.xml to use correct docker_url\"\n#     $sh_c 'sed -i -e \"s|<docker_url>.*</docker_url>|<docker_url>tcp://127.0.0.1:2375/</docker_url>|g\" /etc/iofog-agent/config.xml'\n\n#     echo \"# Restarting iofog-agent service\"\n#     $sh_c \"service iofog-agent stop\"\n#     sleep 3\n#     $sh_c \"service iofog-agent start\"\n#  fi\n# }\n\ndo_create_env() {\nENV_FILE_NAME=iofog-agent.env # Used as an env file in systemd\n\nENV_FILE=\"$ETC_DIR/$ENV_FILE_NAME\"\n\n# Env file (for systemd)\nrm -f \"$ENV_FILE\"\ntouch \"$ENV_FILE\"\n\necho \"IOFOG_AGENT_IMAGE=${agent_image}\" >> \"$ENV_FILE\"\n\n\n}\n\ndo_install_iofog() {\n\t# AGENT_CONFIG_FOLDER=/etc/iofog-agent\n\n\techo \"# Installing ioFog agent...\"\n\t\n\t# # Save iofog-agent config\n\t# if [ -d ${AGENT_CONFIG_FOLDER} ]; then\n\t# \tsudo rm -rf ${SAVED_AGENT_CONFIG_FOLDER}\n\t# \tsudo mkdir -p ${SAVED_AGENT_CONFIG_FOLDER}\n\t# \tsudo cp -r ${AGENT_CONFIG_FOLDER}/* ${SAVED_AGENT_CONFIG_FOLDER}/\n\t# fi\n\n    # 1. Ensure folders exist\n    for FOLDER in ${ETC_DIR} ${AGENT_LOG_FOLDER} ${AGENT_BACKUP_FOLDER} ${AGENT_MESSAGE_FOLDER}; do\n        if [ ! -d \"$FOLDER\" ]; then\n            echo \"Creating folder: $FOLDER\"\n            sudo mkdir -p \"$FOLDER\"\n            sudo chmod 775 \"$FOLDER\"\n        fi\n    done\n\tdo_create_env\n    # 4. Create systemd service file\n    echo \"Creating systemd service for ioFog agent...\"\n    SYSTEMD_SERVICE_FILE=/etc/systemd/system/iofog-agent.service\n\n    cat <<EOF | sudo tee ${SYSTEMD_SERVICE_FILE} > /dev/null\n[Unit]\nDescription=Datasance PoT IoFog Agent Service\nAfter=docker.service\nRequires=docker.service\n\n[Service]\nTimeoutStartSec=0\nRestart=always\nExecStartPre=/usr/bin/docker pull ${agent_image} \nExecStartPre=-/usr/bin/docker rm -f ${AGENT_CONTAINER_NAME}\nExecStart=/usr/bin/docker run --rm --name ${AGENT_CONTAINER_NAME} \\\\\n--env-file ${ETC_DIR}/iofog-agent.env \\\\\n-v /var/run/docker.sock:/var/run/docker.sock:rw \\\\\n-v iofog-agent-config:/etc/iofog-agent:rw \\\\\n-v /var/log/iofog-agent:/var/log/iofog-agent:rw \\\\\n-v /var/backups/iofog-agent:/var/backups/iofog-agent:rw \\\\\n-v /usr/share/iofog-agent:/usr/share/iofog-agent:rw \\\\\n-v /var/lib/iofog-agent:/var/lib/iofog-agent:rw \\\\\n--net=host \\\\\n--privileged \\\\\n--stop-timeout 60 \\\\\n--attach stdout \\\\\n--attach stderr \\\\\n${agent_image}\nExecStop=/usr/bin/docker stop ${AGENT_CONTAINER_NAME}\n\n[Install]\nWantedBy=default.target\nEOF\n\n    # Reload systemd and enable the service\n    sudo systemctl daemon-reload\n    sudo systemctl enable iofog-agent.service\n\n    # 5. Create the /usr/local/bin/iofog-agent script\n    echo \"Creating iofog-agent executable script...\"\n    EXECUTABLE_FILE=/usr/local/bin/iofog-agent\n\n    cat <<'EOF' | sudo tee ${EXECUTABLE_FILE} > /dev/null\n#!/bin/bash\nCONTAINER_NAME=\"iofog-agent\"\n\n# Check if the container is running\nif ! docker ps --format '{{.Names}}' | grep -q \"^${CONTAINER_NAME}$\"; then\n    echo \"Error: The iofog-agent container is not running.\"\n    exit 1\nfi\n\n# Execute the command in the container\ndocker exec ${CONTAINER_NAME} iofog-agent \"$@\"\nEOF\n\n    # Make the script executable\n    sudo chmod +x ${EXECUTABLE_FILE}\n\n    echo \"ioFog agent installation completed!\"\n\n\t# # Restore iofog-agent config\n\t# if [ -d ${SAVED_AGENT_CONFIG_FOLDER} ]; then\n\t# \tsudo mv ${SAVED_AGENT_CONFIG_FOLDER}/* ${AGENT_CONFIG_FOLDER}/\n\t# \tsudo rmdir ${SAVED_AGENT_CONFIG_FOLDER}\n\t# fi\n\t# sudo chmod 775 ${AGENT_CONFIG_FOLDER}\n\n}\n\ndo_start_iofog(){\n\t# shellcheck disable=SC2261\n\tsudo service iofog-agent start > /dev/null 2&>1 &\n\tlocal STATUS=\"\"\n\tlocal ITER=0\n\twhile [ \"$STATUS\" != \"RUNNING\" ] ; do\n    ITER=$((ITER+1))\n    if [ \"$ITER\" -gt 60 ]; then\n      echo 'Timed out waiting for Agent to be RUNNING'\n      exit 1;\n    fi\n    sleep 1\n    STATUS=$(sudo iofog-agent status | cut -f2 -d: | head -n 1 | tr -d '[:space:]')\n    echo \"${STATUS}\"\n\tdone\n\tsudo iofog-agent \"config -cf 10 -sf 10\"\n}\n\nagent_image=\"$1\"\n# controller_image=\"$2\"\necho \"Using variables\"\necho \"version: $agent_image\"\n# echo \"controller-image: $controller_imag\"\n\n. /etc/iofog/agent/init.sh\ninit\ndo_check_install\ndo_stop_iofog\ndo_install_iofog\ndo_start_iofog"),
	}
	fileg := &embedded.EmbeddedFile{
		Filename:    "container-agent/uninstall_iofog.sh",
		FileModTime: time.Unix(1738603394, 0),

		Content: string("#!/bin/sh\nset -x\nset -e\n\nAGENT_CONFIG_FOLDER=iofog-agent-config\nAGENT_LOG_FOLDER=/var/log/iofog-agent\nAGENT_BACKUP_FOLDER=/var/backups/iofog-agent\nAGENT_MESSAGE_FOLDER=/var/lib/iofog-agent\nSYSTEMD_SERVICE_FILE=/etc/systemd/system/iofog-agent.service\nEXECUTABLE_FILE=/usr/local/bin/iofog-agent\nCONTAINER_NAME=\"iofog-agent\"\n\ndo_uninstall_iofog() {\n    echo \"# Removing ioFog agent...\"\n\n    # Disable and stop the systemd service\n    if [ -f ${SYSTEMD_SERVICE_FILE} ]; then\n        echo \"Disabling and stopping the systemd service...\"\n        sudo systemctl stop iofog-agent.service || true\n        sudo systemctl disable iofog-agent.service || true\n        sudo rm -f ${SYSTEMD_SERVICE_FILE}\n        sudo systemctl daemon-reload\n    fi\n\n    # Remove the Docker container\n    if docker ps --format '{{.Names}}' | grep -q \"^${CONTAINER_NAME}$\"; then\n        echo \"Stopping and removing the ioFog agent container...\"\n        docker stop ${CONTAINER_NAME}\n        docker rm ${CONTAINER_NAME}\n    fi\n\n    # Remove config files\n    echo \"Checking if the Docker volume exists...\"\n\n    if sudo docker volume inspect \"${AGENT_CONFIG_FOLDER}\" >/dev/null 2>&1; then\n        echo \"Docker volume '${AGENT_CONFIG_FOLDER}' found. Removing...\"\n        sudo docker volume rm \"${AGENT_CONFIG_FOLDER}\"\n        echo \"Docker volume '${AGENT_CONFIG_FOLDER}' has been removed.\"\n    else\n        echo \"Docker volume '${AGENT_CONFIG_FOLDER}' does not exist. Skipping removal.\"\n    fi\n\n    # Remove log files\n    echo \"Removing log files...\"\n    sudo rm -rf ${AGENT_LOG_FOLDER}\n\n    # Remove backup files\n    echo \"Removing backup files...\"\n    sudo rm -rf ${AGENT_BACKUP_FOLDER}\n\n    # Remove message files\n    echo \"Removing message files...\"\n    sudo rm -rf ${AGENT_MESSAGE_FOLDER}\n\n    # Remove the executable script\n    if [ -f ${EXECUTABLE_FILE} ]; then\n        echo \"Removing the iofog-agent executable script...\"\n        sudo rm -f ${EXECUTABLE_FILE}\n    fi\n\n    echo \"ioFog agent uninstalled successfully!\"\n}\n\n. /etc/iofog/agent/init.sh\ninit\n\ndo_uninstall_iofog\n"),
	}
	filei := &embedded.EmbeddedFile{
		Filename:    "container-controller/check_prereqs.sh",
		FileModTime: time.Unix(1738603394, 0),

		Content: string("#!/bin/sh\nset -x\n\n# Check can sudo without password\nif ! $(sudo ls /tmp/ > /dev/null); then\n\tMSG=\"Unable to successfully use sudo with user $USER on this host.\\nUser $USER must be in sudoers group and using sudo without password must be enabled.\\nPlease see iofog.org documentation for more details.\"\n\techo $MSG\n\texit 1\nfi\n"),
	}
	filej := &embedded.EmbeddedFile{
		Filename:    "container-controller/init.sh",
		FileModTime: time.Unix(1738603394, 0),

		Content: string("#!/bin/sh\nset -x\nset -e\n\nget_distribution() {\n\tlsb_dist=\"\"\n\t# Every system that we officially support has /etc/os-release\n\tif [ -r /etc/os-release ]; then\n\t\tlsb_dist=\"$(. /etc/os-release && echo \"$ID\")\"\n\t\tlsb_dist=\"$(echo \"$lsb_dist\" | tr '[:upper:]' '[:lower:]')\"\n\telse\n\t\techo \"Unsupported Linux distribution!\"\n\t\texit 1\n\tfi\n\techo \"# Our distro is $lsb_dist\"\n}\n\n# Check if this is a forked Linux distro\ncheck_forked() {\n\t# Check for lsb_release command existence, it usually exists in forked distros\n\tif command_exists lsb_release; then\n\t\t# Check if the `-u` option is supported\n\t\tset +e\n\t\tlsb_release -a\n\t\tlsb_release_exit_code=$?\n\t\tset -e\n\n\t\t# Check if the command has exited successfully, it means we're in a forked distro\n\t\tif [ \"$lsb_release_exit_code\" = \"0\" ]; then\n\t\t\t# Print info about current distro\n\t\t\tcat <<-EOF\n\t\t\tYou're using '$lsb_dist' version '$dist_version'.\n\t\t\tEOF\n\n\t\t\t# Get the upstream release info\n\t\t\tlsb_dist=$(lsb_release -a 2>&1 | tr '[:upper:]' '[:lower:]' | grep -E 'id' | cut -d ':' -f 2 | tr -d '[:space:]')\n\t\t\tdist_version=$(lsb_release -a 2>&1 | tr '[:upper:]' '[:lower:]' | grep -E 'codename' | cut -d ':' -f 2 | tr -d '[:space:]')\n\n\t\t\t# Print info about upstream distro\n\t\t\tcat <<-EOF\n\t\t\tUpstream release is '$lsb_dist' version '$dist_version'.\n\t\t\tEOF\n\t\telse\n\t\t\tif [ -r /etc/debian_version ] && [ \"$lsb_dist\" != \"ubuntu\" ] && [ \"$lsb_dist\" != \"raspbian\" ]; then\n\t\t\t\tif [ \"$lsb_dist\" = \"osmc\" ]; then\n\t\t\t\t\t# OSMC runs Raspbian\n\t\t\t\t\tlsb_dist=raspbian\n\t\t\t\telse\n\t\t\t\t\t# We're Debian and don't even know it!\n\t\t\t\t\tlsb_dist=debian\n\t\t\t\tfi\n\t\t\t\tdist_version=\"$(sed 's/\\/.*//' /etc/debian_version | sed 's/\\..*//')\"\n\t\t\t\tcase \"$dist_version\" in\n\t\t\t\t\t14)\n\t\t\t\t\t\tdist_version=\"forky\"\n\t\t\t\t\t;;\n\t\t\t\t\t13)\n\t\t\t\t\t\tdist_version=\"trixie\"\n\t\t\t\t\t;;\n\t\t\t\t\t12)\n\t\t\t\t\t\tdist_version=\"bookworm\"\n\t\t\t\t\t;;\n\t\t\t\t\t11)\n\t\t\t\t\t\tdist_version=\"bullseye\"\n\t\t\t\t\t;;\n\t\t\t\t\t10)\n\t\t\t\t\t\tdist_version=\"buster\"\n\t\t\t\t\t;;\n\t\t\t\t\t9)\n\t\t\t\t\t\tdist_version=\"stretch\"\n\t\t\t\t\t;;\n\t\t\t\t\t8|'Kali Linux 2')\n\t\t\t\t\t\tdist_version=\"jessie\"\n\t\t\t\t\t;;\n\t\t\t\t\t7)\n\t\t\t\t\t\tdist_version=\"wheezy\"\n\t\t\t\t\t;;\n\t\t\t\tesac\n\t\t\telif [ -r /etc/redhat-release ] && [ \"$lsb_dist\" = \"\" ]; then\n\t\t\t\tlsb_dist=redhat\n\t\t\tfi\n\t\tfi\n\tfi\n}\n\ncommand_exists() {\n\tcommand -v \"$@\"\n}\n\ninit() {\n\tsh_c='sh -c'\n\tif [ \"$user\" != 'root' ]; then\n\t\tif command_exists sudo; then\n\t\t\tsh_c='sudo -E sh -c'\n\t\telif command_exists su; then\n\t\t\tsh_c='su -c'\n\t\telse\n\t\t\tcat >&2 <<-'EOF'\n\t\t\tError: this installer needs the ability to run commands as root.\n\t\t\tWe are unable to find either \"sudo\" or \"su\" available to make this happen.\n\t\t\tEOF\n\t\t\texit 1\n\t\tfi\n\tfi\n\n\tget_distribution\n\n\tcase \"$lsb_dist\" in\n\n\t\tubuntu)\n\t\t\tif command_exists lsb_release; then\n\t\t\t\tdist_version=\"$(lsb_release --codename | cut -f2)\"\n\t\t\tfi\n\t\t\tif [ -z \"$dist_version\" ] && [ -r /etc/lsb-release ]; then\n\t\t\t\tdist_version=\"$(. /etc/lsb-release && echo \"$DISTRIB_CODENAME\")\"\n\t\t\tfi\n\t\t;;\n\n\t\tdebian|raspbian)\n\t\t\tdist_version=\"$(sed 's/\\/.*//' /etc/debian_version | sed 's/\\..*//')\"\n\t\t\tcase \"$dist_version\" in\n\t\t\t\t10)\n\t\t\t\t\tdist_version=\"buster\"\n\t\t\t\t\t# Avoid https://stackoverflow.com/questions/68802802/repository-http-security-debian-org-debian-security-buster-updates-inrelease\n\t\t\t\t\t$sh_c \"apt-get update --allow-releaseinfo-change\"\n\t\t\t\t;;\n\t\t\t\t9)\n\t\t\t\t\tdist_version=\"stretch\"\n\t\t\t\t;;\n\t\t\t\t8)\n\t\t\t\t\tdist_version=\"jessie\"\n\t\t\t\t;;\n\t\t\t\t7)\n\t\t\t\t\tdist_version=\"wheezy\"\n\t\t\t\t;;\n\t\t\tesac\n\t\t;;\n\n\t\tcentos)\n\t\t\tif [ -z \"$dist_version\" ] && [ -r /etc/os-release ]; then\n\t\t\t\tdist_version=\"$(. /etc/os-release && echo \"$VERSION_ID\")\"\n\t\t\tfi\n\t\t;;\n\n\t\trhel|ol|sles)\n\t\t\tee_notice \"$lsb_dist\"\n\t\t\texit 1\n\t\t\t;;\n\n\t\t*)\n\t\t\tif command_exists lsb_release; then\n\t\t\t\tdist_version=\"$(lsb_release --release | cut -f2)\"\n\t\t\tfi\n\t\t\tif [ -z \"$dist_version\" ] && [ -r /etc/os-release ]; then\n\t\t\t\tdist_version=\"$(. /etc/os-release && echo \"$VERSION_ID\")\"\n\t\t\tfi\n\t\t;;\n\n\tesac\n\n\t# Check if this is a forked Linux distro\n\tcheck_forked\n\n\t# Check if we actually support this configuration\n\tif [ \"$lsb_dist\" = \"redhat\" ]; then\n\t\tcat >&2 <<-'EOF'\n\n\t\tSince Docker Community Edition is not supported for RedHat you have to procceed with installation manually.\n\t\tPlease visit the following URL for more detailed installation instructions:\n\n\t\thttps://iofog.org/install/RHEL\n\n\t\tEOF\n\t\texit 1\n\tfi\n\n}"),
	}
	filek := &embedded.EmbeddedFile{
		Filename:    "container-controller/install_docker.sh",
		FileModTime: time.Unix(1738603394, 0),

		Content: string("#!/bin/sh\nset -x\nset -e\n\nstart_docker() {\n\tset +e\n\t# check if docker is running\n\tif ! $sh_c \"docker ps\" >/dev/null 2>&1; then\n\t\t# Try init.d\n\t\t$sh_c \"/etc/init.d/docker start\"\n\t\tlocal err_code=$?\n\t\t# Try systemd\n\t\tif [ $err_code -ne 0 ]; then\n\t\t\t$sh_c \"service docker start\"\n\t\t\terr_code=$?\n\t\tfi\n\t\t# Try snapd\n\t\tif [ $err_code -ne 0 ]; then\n\t\t\t$sh_c \"snap docker start\"\n\t\t\terr_code=$?\n\t\tfi\n\t\tif [ $err_code -ne 0 ]; then\n\t\t\techo \"Could not start Docker daemon\"\n\t\t\texit 1\n\t\tfi\n\tfi\n\tset -e\n}\n\n\ndo_install_docker() {\n\t# Check that Docker 25.0.0 or greater is installed\n\tif command_exists docker; then\n\t\tdocker_version=$(docker -v | sed 's/.*version \\(.*\\),.*/\\1/' | tr -d '.')\n\t\tif [ \"$docker_version\" -ge 2600 ]; then\n\t\t\techo \"# Docker $docker_version already installed\"\n\t\t\tstart_docker\n\t\t\treturn\n\t\tfi\n\tfi\n\techo \"# Installing Docker...\"\n\tcase \"$dist_version\" in\n\t\t\"stretch\")\n\t\t\t$sh_c \"apt install -y apt-transport-https ca-certificates curl gnupg2 software-properties-common\"\n\t\t\tcurl -fsSL https://download.docker.com/linux/debian/gpg | $sh_c \"apt-key add -\"\n\t\t\t$sh_c \"sudo add-apt-repository \\\"deb [arch=$(dpkg --print-architecture) https://download.docker.com/linux/debian $(lsb_release -cs) stable\\\"\"\n\t\t\t$sh_c \"apt-get update -y\"\n\t\t\t$sh_c \"sudo apt install -y docker-ce\"\n\t\t;;\n    7|8)\n      $sh_c \"sudo yum install -y yum-utils || echo 'yum-utils already installed'\"\n      $sh_c \"sudo yum-config-manager \\\n            --add-repo \\\n            https://download.docker.com/linux/centos/docker-ce.repo\"\n      $sh_c \"sudo yum install docker-ce docker-ce-cli containerd.io -y\"\n    ;;\n\t\t*)\n\t\t\tcurl -fsSL https://get.docker.com/ | sh\n\t\t;;\n\tesac\n\t\n\tif ! command_exists docker; then\n\t\techo \"Failed to install Docker\"\n\t\texit 1\n\tfi\n\tstart_docker\n}\n\n. /etc/iofog/controller/init.sh\ninit\ndo_install_docker\n"),
	}
	filel := &embedded.EmbeddedFile{
		Filename:    "container-controller/install_iofog.sh",
		FileModTime: time.Unix(1738603394, 0),

		Content: string("#!/bin/sh\nset -x\nset -e\n\n# INSTALL_DIR=\"/opt/iofog\"\nTMP_DIR=\"/tmp/iofog\"\nETC_DIR=\"/etc/iofog/controller\"\nCONTROLLER_LOG_FOLDER=/var/log/iofog-controller\nCONTROLLER_CONTAINER_NAME=\"iofog-controller\"\n\n\ncommand_exists() {\n    command -v \"$1\" >/dev/null 2>&1\n}\n\ndo_stop_iofog_controller() {\n\tif command_exists iofog-controller; then\n\t\tsudo service iofog-controller stop\n\tfi\n}\n\ndo_install_iofog_controller() {\n\n\techo \"# Installing ioFog controller...\"\n\n\n    # 1. Ensure folders exist\n    for FOLDER in ${ETC_DIR} ${CONTROLLER_LOG_FOLDER}; do\n        if [ ! -d \"$FOLDER\" ]; then\n            echo \"Creating folder: $FOLDER\"\n            sudo mkdir -p \"$FOLDER\"\n            sudo chmod 775 \"$FOLDER\"\n        fi\n    done\n\n    # 4. Create systemd service file\n    echo \"Creating systemd service for ioFog controller...\"\n    SYSTEMD_SERVICE_FILE=/etc/systemd/system/iofog-controller.service\n\n    cat <<EOF | sudo tee ${SYSTEMD_SERVICE_FILE} > /dev/null\n[Unit]\nDescription=Datasance PoT IoFog Controller Service\nAfter=docker.service\nRequires=docker.service\n\n[Service]\nTimeoutStartSec=0\nRestart=always\nExecStartPre=/usr/bin/docker pull ${controller_image} \nExecStartPre=-/usr/bin/docker rm -f ${CONTROLLER_CONTAINER_NAME}\nExecStart=/usr/bin/docker run --rm --name ${CONTROLLER_CONTAINER_NAME} \\\\\n-e IOFOG_CONTROLLER_IMAGE=${controller_image} \\\\\n--env-file ${ETC_DIR}/iofog-controller.env \\\\\n-v iofog-controller-db:/home/runner/.npm-global/lib/node_modules/@datasance/iofogcontroller/src/data/sqlite_files/:rw \\\\\n-v iofog-controller-log:/var/log/iofog-controller:rw \\\\\n-p 51121:51121 \\\\\n-p 8008:8008 \\\\\n--stop-timeout 60 \\\\\n--attach stdout \\\\\n--attach stderr \\\\\n${controller_image}\nExecStop=/usr/bin/docker stop ${CONTROLLER_CONTAINER_NAME}\n\n[Install]\nWantedBy=default.target\nEOF\n\n    # Reload systemd and enable the service\n    sudo systemctl daemon-reload\n    sudo systemctl enable iofog-controller.service\n\tsudo systemctl start iofog-controller.service\n\n    # 5. Create the /usr/local/bin/iofog-controller script\n    echo \"Creating iofog-controller executable script...\"\n    EXECUTABLE_FILE=/usr/local/bin/iofog-controller\n\n    cat <<'EOF' | sudo tee ${EXECUTABLE_FILE} > /dev/null\n#!/bin/bash\nCONTAINER_NAME=\"iofog-controller\"\n\n# Check if the container is running\nif ! docker ps --format '{{.Names}}' | grep -q \"^${CONTAINER_NAME}$\"; then\n    echo \"Error: The iofog-controller container is not running.\"\n    exit 1\nfi\n\n# Execute the command in the container\ndocker exec ${CONTAINER_NAME} iofog-controller \"$@\"\nEOF\n\n    # Make the script executable\n    sudo chmod +x ${EXECUTABLE_FILE}\n\n    echo \"ioFog controller installation completed!\"\n\n}\n\n\n# main\ncontroller_image=\"$1\"\n\n. /etc/iofog/controller/init.sh\ninit\ndo_stop_iofog_controller\ndo_install_iofog_controller\n"),
	}
	filem := &embedded.EmbeddedFile{
		Filename:    "container-controller/set_env.sh",
		FileModTime: time.Unix(1738603394, 0),

		Content: string("#!/bin/sh\nset -x\nset -e\n\nETC_DIR=\"/etc/iofog/controller\"\nENV_FILE_NAME=iofog-controller.env # Used as an env file in systemd\n\nENV_FILE=\"$ETC_DIR/$ENV_FILE_NAME\"\n\n# Create folder\nmkdir -p \"$ETC_DIR\"\n\n# Env file (for systemd)\nrm -f \"$ENV_FILE\"\ntouch \"$ENV_FILE\"\n\nfor var in \"$@\"\ndo\n  echo \"$var\" >> \"$ENV_FILE\"\ndone"),
	}
	filen := &embedded.EmbeddedFile{
		Filename:    "container-controller/uninstall_iofog.sh",
		FileModTime: time.Unix(1738603394, 0),

		Content: string("#!/bin/sh\nset -x\nset -e\n\n\nCONTROLLER_LOG_DIR=\"iofog-controller-log\"\nSYSTEMD_SERVICE_FILE=/etc/systemd/system/iofog-controller.service\nCONTAINER_NAME=\"iofog-controller\"\nEXECUTABLE_FILE=/usr/local/bin/iofog-controller\nCONTROLLER_DB=iofog-controller-db\n\n\ndo_uninstall_controller() {\n    echo \"# Removing ioFog controller...\"\n\n    # Disable and stop the systemd service\n    if [ -f ${SYSTEMD_SERVICE_FILE} ]; then\n        echo \"Disabling and stopping the systemd service...\"\n        sudo systemctl stop iofog-controller.service || true\n        sudo systemctl disable iofog-controller.service || true\n        sudo rm -f ${SYSTEMD_SERVICE_FILE}\n        sudo systemctl daemon-reload\n    fi\n\n    # Remove the Docker container\n    if docker ps --format '{{.Names}}' | grep -q \"^${CONTAINER_NAME}$\"; then\n        echo \"Stopping and removing the ioFog controller container...\"\n        docker stop ${CONTAINER_NAME}\n        docker rm ${CONTAINER_NAME}\n    fi\n\n    # Remove config files\n    echo \"Checking if the Docker volume exists...\"\n\n    if sudo docker volume inspect \"${CONTROLLER_DB}\" >/dev/null 2>&1; then\n        echo \"Docker volume '${CONTROLLER_DB}' found. Removing...\"\n        sudo docker volume rm \"${CONTROLLER_DB}\"\n        echo \"Docker volume '${CONTROLLER_DB}' has been removed.\"\n    else\n        echo \"Docker volume '${CONTROLLER_DB}' does not exist. Skipping removal.\"\n    fi\n\n    # Remove log files\n    echo \"Removing log files...\"\n    if sudo docker volume inspect \"${CONTROLLER_LOG_DIR}\" >/dev/null 2>&1; then\n        echo \"Docker volume '${CONTROLLER_LOG_DIR}' found. Removing...\"\n        sudo docker volume rm \"${CONTROLLER_LOG_DIR}\"\n        echo \"Docker volume '${CONTROLLER_LOG_DIR}' has been removed.\"\n    else\n        echo \"Docker volume '${CONTROLLER_LOG_DIR}' does not exist. Skipping removal.\"\n    fi\n\n\n    # Remove the executable script\n    if [ -f ${EXECUTABLE_FILE} ]; then\n        echo \"Removing the iofog-controller executable script...\"\n        sudo rm -f ${EXECUTABLE_FILE}\n    fi\n\n    echo \"ioFog controller uninstalled successfully!\"\n}\n\n. /etc/iofog/controller/init.sh\ninit\n\ndo_uninstall_controller"),
	}
	filep := &embedded.EmbeddedFile{
		Filename:    "controller/check_prereqs.sh",
		FileModTime: time.Unix(1681101988, 0),

		Content: string("#!/bin/sh\nset -x\n\n# Check can sudo without password\nif ! $(sudo ls /tmp/ > /dev/null); then\n\tMSG=\"Unable to successfully use sudo with user $USER on this host.\\nUser $USER must be in sudoers group and using sudo without password must be enabled.\\nPlease see iofog.org documentation for more details.\"\n\techo $MSG\n\texit 1\nfi\n"),
	}
	fileq := &embedded.EmbeddedFile{
		Filename:    "controller/install_iofog.sh",
		FileModTime: time.Unix(1738603394, 0),

		Content: string("#!/bin/sh\nset -x\nset -e\n\nINSTALL_DIR=\"/opt/iofog\"\nTMP_DIR=\"/tmp/iofog\"\nETC_DIR=\"/etc/iofog/controller\"\n\ncontroller_service() {\n    USE_SYSTEMD=`grep -m1 -c systemd /proc/1/comm`\n    USE_INITCTL=`which initctl | wc -l`\n    USE_SERVICE=`which service | wc -l`\n\n    if [ $USE_SYSTEMD -eq 1 ]; then\n        cp \"$ETC_DIR/service/iofog-controller.systemd\" /etc/systemd/system/iofog-controller.service\n        chmod 644 /etc/systemd/system/iofog-controller.service\n        systemctl daemon-reload\n        systemctl enable iofog-controller.service\n    elif [ $USE_INITCTL -eq 1 ]; then\n        cp \"$ETC_DIR/service/iofog-controller.initctl\" /etc/init/iofog-controller.conf\n        initctl reload-configuration\n    elif [ $USE_SERVICE -eq 1 ]; then\n        cp \"$ETC_DIR/service/iofog-controller.update-rc\" /etc/init.d/iofog-controller\n        chmod +x /etc/init.d/iofog-controller\n        update-rc.d iofog-controller defaults\n    else\n        echo \"Unable to setup Controller startup script.\"\n    fi\n}\n\ninstall_package() {\n\t\tif [ -z \"$(command -v apt)\" ]; then\n\t\t\techo \"Unsupported distro\"\n\t\t\texit 1\n\t\tfi\n\t\tapt update -qq\n\t\tapt install -y $1\n}\n\ninstall_deps() {\n\tif [ -z \"$(command -v curl)\" ]; then\n        install_package \"curl\"\n\tfi\n\n\tif [ -z \"$(command -v lsof)\" ]; then\n        install_package \"lsof\"\n\tfi\n\n\tif [ -z \"$(command -v make)\" ]; then\n        install_package \"build-essential\"\n\tfi\n\n\tif [ -z \"$(command -v python2)\" ]; then\n        install_package \"python2\"\n\tfi\n\n\tif [ -z \"$(command -v python3)\" ]; then\n        install_package \"python3\"\n\tfi\n\n\tif [ -z \"$(command -v python-is-python3)\" ]; then\n        install_package \"python-is-python3\"\n\tfi\n}\n\ncreate_logrotate() {\n    cat <<EOF > /etc/logrotate.d/iofog-controller\n/var/log/iofog-controller/iofog-controller.log {\n  rotate 10\n  size 100m\n  compress\n  notifempty\n  missingok\n  postrotate\n      kill -HUP `cat $INSTALL_DIR/controller/lib/node_modules/@datasance/iofogcontroller/src/iofog-controller.pid`\n}\nEOF\n    chmod 644 /etc/logrotate.d/iofog-controller\n}\n\ndeploy_controller() {\n\t# Nuke any existing instances\n\tif [ ! -z \"$(lsof -ti tcp:51121)\" ]; then\n\t\tlsof -ti tcp:51121 | xargs kill\n\tfi\n\n# #\t If token is provided, set up private repo\n# \tif [ ! -z $token ]; then\n# \t\tif [ ! -z $(npmrc | grep iofog) ]; then\n# \t\t\tnpmrc -c iofog\n# \t\t\tnpmrc iofog\n# \t\tfi\n# \t\tcurl -s https://\"$token\":@packagecloud.io/install/repositories/\"$repo\"/script.node.sh?package_id=7463817 | force_npm=1 bash\n# \t\tmv ~/.npmrc ~/.npmrcs/npmrc\n# \t\tln -s ~/.npmrcs/npmrc ~/.npmrc\n# \telse\n# \t\tnpmrc default\n# \tfi\n\t# Save DB\n\tif [ -f \"$INSTALL_DIR/controller/lib/node_modules/@datasance/iofogcontroller/package.json\" ]; then\n\t\t# If iofog-controller is not running, it will fail to stop - ignore that failure.\n\t\tnode $INSTALL_DIR/controller/lib/node_modules/@datasance/iofogcontroller/scripts/scripts-api.js preuninstall > /dev/null 2>&1 || true\n\tfi\n\n\t# Install in temporary location\n\tmkdir -p \"$TMP_DIR/controller\"\n\tchmod 0777 \"$TMP_DIR/controller\"\n\tif [ -z $version ]; then\n\t\tnpm install -g -f @datasance/iofogcontroller --unsafe-perm --prefix \"$TMP_DIR/controller\"\n\telse\n\t\tnpm install -g -f @datasance/iofogcontroller --unsafe-perm --prefix \"$TMP_DIR/controller\"\n\tfi\n\t# Move files into $INSTALL_DIR/controller\n\tmkdir -p \"$INSTALL_DIR/\"\n\trm -rf \"$INSTALL_DIR/controller\" # Clean possible previous install\n\tmv \"$TMP_DIR/controller/\" \"$INSTALL_DIR/\"\n\n\t# Restore DB\n\tif [ -f \"$INSTALL_DIR/controller/lib/node_modules/@datasance/iofogcontroller/package.json\" ]; then\n\t\tnode $INSTALL_DIR/controller/lib/node_modules/@datasance/iofogcontroller/scripts/scripts-api.js postinstall > /dev/null 2>&1 || true\n\tfi\n\n\t# Symbolic links\n\tif [ ! -f \"/usr/local/bin/iofog-controller\" ]; then\n\t\tln -fFs \"$INSTALL_DIR/controller/bin/iofog-controller\" /usr/local/bin/iofog-controller\n\tfi\n\n\t# Set controller permissions\n\tchmod 744 -R \"$INSTALL_DIR/controller\"\n\n\t# Startup script\n\tcontroller_service\n\n\t# Run controller\n\t. /opt/iofog/config/controller/env.sh\n\tiofog-controller start\n}\n\n# main\nversion=\"$1\"\n# repo=$([ -z \"$2\" ] && echo \"iofog/iofog-controller-snapshots\" || echo \"$2\")\n# token=\"$3\"\n\ninstall_deps\ncreate_logrotate\ndeploy_controller\n"),
	}
	filer := &embedded.EmbeddedFile{
		Filename:    "controller/install_node.sh",
		FileModTime: time.Unix(1735589285, 0),

		Content: string("#!/bin/sh\nset -x\nset -e\n\nload_existing_nvm() {\n\tset +e\n\tif [ -z \"$(command -v nvm)\" ]; then\n\t\texport NVM_DIR=\"${HOME}/.nvm\"\n\t\tmkdir -p $NVM_DIR\n\t\tif [ -f \"$NVM_DIR/nvm.sh\" ]; then\n\t\t\t[ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\" # This loads nvm\n\t\tfi\n\tfi\n\tset -e\n}\n\ninstall_node() {\n\tload_existing_nvm\n\tif [ -z \"$(command -v nvm)\" ]; then\n\t\tcurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/refs/tags/v0.40.1/install.sh | bash\n\t\texport NVM_DIR=\"${HOME}/.nvm\"\n\t\t[ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\"\n\tfi\n\tnvm install  v20.17.0\n\tnvm use  v20.17.0\n\tln -Ffs $(which node) /usr/local/bin/node\n\tln -Ffs $(which npm) /usr/local/bin/npm\n\n\t# npmrc\n\tif [ -z \"$(command -v npmrc)\" ]; then\n\t\tnpm i npmrc -g\n\tfi\n\tln -Ffs $(which npmrc) /usr/local/bin/npmrc\n}\n\ninstall_node"),
	}
	filet := &embedded.EmbeddedFile{
		Filename:    "controller/service/iofog-controller.initctl",
		FileModTime: time.Unix(1681101988, 0),

		Content: string("description \"ioFog Controller\"\n\nstart on (runlevel [2345])\nstop on (runlevel [!2345])\n\nrespawn\n\nscript\n  . /opt/iofog/config/controller/env.sh\n  exec /usr/local/bin/iofog-controller start\nend script"),
	}
	fileu := &embedded.EmbeddedFile{
		Filename:    "controller/service/iofog-controller.systemd",
		FileModTime: time.Unix(1681101988, 0),

		Content: string("[Unit]\nDescription=ioFog Controller\n\n[Service]\nType=forking\nExecStart=/usr/local/bin/iofog-controller start\nExecStop=/usr/local/bin/iofog-controller stop\nEnvironmentFile=/opt/iofog/config/controller/env.env\n\n[Install]\nWantedBy=multi-user.target\n"),
	}
	filev := &embedded.EmbeddedFile{
		Filename:    "controller/service/iofog-controller.update-rc",
		FileModTime: time.Unix(1681101988, 0),

		Content: string("#!/bin/sh\n\ncase \"$1\" in\n  start)\n    . /opt/iofog/controller/env.env\n    /usr/local/bin/iofog-controller start\n    ;;\n  stop)\n    /usr/local/bin/iofog-controller stop\n    ;;\n  restart)\n    /usr/local/bin/iofog-controller stop\n    . /opt/iofog/config/controller/env.sh\n    /usr/local/bin/iofog-controller start\n    ;;\n  *)\n    echo \"Usage: $0 {start|stop|restart}\"\nesac\n"),
	}
	filew := &embedded.EmbeddedFile{
		Filename:    "controller/set_env.sh",
		FileModTime: time.Unix(1681101988, 0),

		Content: string("#!/bin/sh\nset -x\nset -e\n\nCONF_FOLDER=/opt/iofog/config/controller\nSOURCE_FILE_NAME=env.sh # Used to source env variables\nENV_FILE_NAME=env.env # Used as an env file in systemd\n\nSOURCE_FILE=\"$CONF_FOLDER/$SOURCE_FILE_NAME\"\nENV_FILE=\"$CONF_FOLDER/$ENV_FILE_NAME\"\n\n# Create folder\nmkdir -p \"$CONF_FOLDER\"\n\n# Source file\necho \"#!/bin/sh\" > \"$SOURCE_FILE\"\n\n# Env file (for systemd)\nrm -f \"$ENV_FILE\"\ntouch \"$ENV_FILE\"\n\nfor var in \"$@\"\ndo\n  echo \"export $var\" >> \"$SOURCE_FILE\"\n  echo \"$var\" >> \"$ENV_FILE\"\ndone"),
	}
	filex := &embedded.EmbeddedFile{
		Filename:    "controller/uninstall_iofog.sh",
		FileModTime: time.Unix(1681101988, 0),

		Content: string("#!/bin/sh\nset -x\nset -e\n\nCONTROLLER_DIR=\"/opt/iofog/controller/\"\nCONTROLLER_LOG_DIR=\"/var/log/iofog/\"\n\ndo_uninstall_controller() {\n  # Remove folders\n  sudo rm -rf $CONTROLLER_DIR\n  sudo rm -rf $CONTROLLER_LOG_DIR\n\n  # Remove symbolic links\n  rm -f /usr/local/bin/iofog-controller\n\n  # Remove service files\n  USE_SYSTEMD=`grep -m1 -c systemd /proc/1/comm`\n  USE_INITCTL=`which initctl | wc -l`\n  USE_SERVICE=`which service | wc -l`\n\n  if [ $USE_SYSTEMD -eq 1 ]; then\n    systemctl stop iofog-controller.service\n    rm -f /etc/systemd/system/iofog-controller.service\n  elif [ $USE_INITCTL -eq 1 ]; then\n    rm -f /etc/init/iofog-controller.conf\n  elif [ $USE_SERVICE -eq 1 ]; then\n    rm -f /etc/init.d/iofog-controller\n  else\n    echo \"Unable to setup Controller startup script.\"\n  fi\n}\n\ndo_uninstall_controller"),
	}

	// define dirs
	dir1 := &embedded.EmbeddedDir{
		Filename:   "",
		DirModTime: time.Unix(1738603394, 0),
		ChildFiles: []*embedded.EmbeddedFile{},
	}
	dir2 := &embedded.EmbeddedDir{
		Filename:   "agent",
		DirModTime: time.Unix(1738603394, 0),
		ChildFiles: []*embedded.EmbeddedFile{
			file3, // "agent/check_prereqs.sh"
			file4, // "agent/init.sh"
			file5, // "agent/install_deps.sh"
			file6, // "agent/install_docker.sh"
			file7, // "agent/install_iofog.sh"
			file8, // "agent/install_java.sh"
			file9, // "agent/uninstall_iofog.sh"

		},
	}
	dira := &embedded.EmbeddedDir{
		Filename:   "container-agent",
		DirModTime: time.Unix(1738603394, 0),
		ChildFiles: []*embedded.EmbeddedFile{
			fileb, // "container-agent/check_prereqs.sh"
			filec, // "container-agent/init.sh"
			filed, // "container-agent/install_deps.sh"
			filee, // "container-agent/install_docker.sh"
			filef, // "container-agent/install_iofog.sh"
			fileg, // "container-agent/uninstall_iofog.sh"

		},
	}
	dirh := &embedded.EmbeddedDir{
		Filename:   "container-controller",
		DirModTime: time.Unix(1738603394, 0),
		ChildFiles: []*embedded.EmbeddedFile{
			filei, // "container-controller/check_prereqs.sh"
			filej, // "container-controller/init.sh"
			filek, // "container-controller/install_docker.sh"
			filel, // "container-controller/install_iofog.sh"
			filem, // "container-controller/set_env.sh"
			filen, // "container-controller/uninstall_iofog.sh"

		},
	}
	diro := &embedded.EmbeddedDir{
		Filename:   "controller",
		DirModTime: time.Unix(1738603394, 0),
		ChildFiles: []*embedded.EmbeddedFile{
			filep, // "controller/check_prereqs.sh"
			fileq, // "controller/install_iofog.sh"
			filer, // "controller/install_node.sh"
			filew, // "controller/set_env.sh"
			filex, // "controller/uninstall_iofog.sh"

		},
	}
	dirs := &embedded.EmbeddedDir{
		Filename:   "controller/service",
		DirModTime: time.Unix(1681101988, 0),
		ChildFiles: []*embedded.EmbeddedFile{
			filet, // "controller/service/iofog-controller.initctl"
			fileu, // "controller/service/iofog-controller.systemd"
			filev, // "controller/service/iofog-controller.update-rc"

		},
	}

	// link ChildDirs
	dir1.ChildDirs = []*embedded.EmbeddedDir{
		dir2, // "agent"
		dira, // "container-agent"
		dirh, // "container-controller"
		diro, // "controller"

	}
	dir2.ChildDirs = []*embedded.EmbeddedDir{}
	dira.ChildDirs = []*embedded.EmbeddedDir{}
	dirh.ChildDirs = []*embedded.EmbeddedDir{}
	diro.ChildDirs = []*embedded.EmbeddedDir{
		dirs, // "controller/service"

	}
	dirs.ChildDirs = []*embedded.EmbeddedDir{}

	// register embeddedBox
	embedded.RegisterEmbeddedBox(`../../assets`, &embedded.EmbeddedBox{
		Name: `../../assets`,
		Time: time.Unix(1738603394, 0),
		Dirs: map[string]*embedded.EmbeddedDir{
			"":                     dir1,
			"agent":                dir2,
			"container-agent":      dira,
			"container-controller": dirh,
			"controller":           diro,
			"controller/service":   dirs,
		},
		Files: map[string]*embedded.EmbeddedFile{
			"agent/check_prereqs.sh":                        file3,
			"agent/init.sh":                                 file4,
			"agent/install_deps.sh":                         file5,
			"agent/install_docker.sh":                       file6,
			"agent/install_iofog.sh":                        file7,
			"agent/install_java.sh":                         file8,
			"agent/uninstall_iofog.sh":                      file9,
			"container-agent/check_prereqs.sh":              fileb,
			"container-agent/init.sh":                       filec,
			"container-agent/install_deps.sh":               filed,
			"container-agent/install_docker.sh":             filee,
			"container-agent/install_iofog.sh":              filef,
			"container-agent/uninstall_iofog.sh":            fileg,
			"container-controller/check_prereqs.sh":         filei,
			"container-controller/init.sh":                  filej,
			"container-controller/install_docker.sh":        filek,
			"container-controller/install_iofog.sh":         filel,
			"container-controller/set_env.sh":               filem,
			"container-controller/uninstall_iofog.sh":       filen,
			"controller/check_prereqs.sh":                   filep,
			"controller/install_iofog.sh":                   fileq,
			"controller/install_node.sh":                    filer,
			"controller/service/iofog-controller.initctl":   filet,
			"controller/service/iofog-controller.systemd":   fileu,
			"controller/service/iofog-controller.update-rc": filev,
			"controller/set_env.sh":                         filew,
			"controller/uninstall_iofog.sh":                 filex,
		},
	})
}
