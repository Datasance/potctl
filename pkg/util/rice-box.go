// Code generated by rice embed-go; DO NOT EDIT.
package util

import (
	"time"

	"github.com/GeertJohan/go.rice/embedded"
)

func init() {

	// define files
	file3 := &embedded.EmbeddedFile{
		Filename:    "agent/check_prereqs.sh",
		FileModTime: time.Unix(1681101988, 0),

		Content: string("#!/bin/sh\nset -x\n\n# Check can sudo without password\nif ! $(sudo ls /tmp/ > /dev/null); then\n\tMSG=\"Unable to successfully use sudo with user $USER on this host.\\nUser $USER must be in sudoers group and using sudo without password must be enabled.\\nPlease see iofog.org documentation for more details.\"\n\techo $MSG\n\texit 1\nfi\n"),
	}
	file4 := &embedded.EmbeddedFile{
		Filename:    "agent/init.sh",
		FileModTime: time.Unix(1708196692, 0),

		Content: string("#!/bin/sh\nset -x\nset -e\n\nget_distribution() {\n\tlsb_dist=\"\"\n\t# Every system that we officially support has /etc/os-release\n\tif [ -r /etc/os-release ]; then\n\t\tlsb_dist=\"$(. /etc/os-release && echo \"$ID\")\"\n\t\tlsb_dist=\"$(echo \"$lsb_dist\" | tr '[:upper:]' '[:lower:]')\"\n\telse\n\t\techo \"Unsupported Linux distribution!\"\n\t\texit 1\n\tfi\n\techo \"# Our distro is $lsb_dist\"\n}\n\n# Check if this is a forked Linux distro\ncheck_forked() {\n\t# Check for lsb_release command existence, it usually exists in forked distros\n\tif command_exists lsb_release; then\n\t\t# Check if the `-u` option is supported\n\t\tset +e\n\t\tlsb_release -a\n\t\tlsb_release_exit_code=$?\n\t\tset -e\n\n\t\t# Check if the command has exited successfully, it means we're in a forked distro\n\t\tif [ \"$lsb_release_exit_code\" = \"0\" ]; then\n\t\t\t# Print info about current distro\n\t\t\tcat <<-EOF\n\t\t\tYou're using '$lsb_dist' version '$dist_version'.\n\t\t\tEOF\n\n\t\t\t# Get the upstream release info\n\t\t\tlsb_dist=$(lsb_release -a 2>&1 | tr '[:upper:]' '[:lower:]' | grep -E 'id' | cut -d ':' -f 2 | tr -d '[:space:]')\n\t\t\tdist_version=$(lsb_release -a 2>&1 | tr '[:upper:]' '[:lower:]' | grep -E 'codename' | cut -d ':' -f 2 | tr -d '[:space:]')\n\n\t\t\t# Print info about upstream distro\n\t\t\tcat <<-EOF\n\t\t\tUpstream release is '$lsb_dist' version '$dist_version'.\n\t\t\tEOF\n\t\telse\n\t\t\tif [ -r /etc/debian_version ] && [ \"$lsb_dist\" != \"ubuntu\" ] && [ \"$lsb_dist\" != \"raspbian\" ]; then\n\t\t\t\tif [ \"$lsb_dist\" = \"osmc\" ]; then\n\t\t\t\t\t# OSMC runs Raspbian\n\t\t\t\t\tlsb_dist=raspbian\n\t\t\t\telse\n\t\t\t\t\t# We're Debian and don't even know it!\n\t\t\t\t\tlsb_dist=debian\n\t\t\t\tfi\n\t\t\t\tdist_version=\"$(sed 's/\\/.*//' /etc/debian_version | sed 's/\\..*//')\"\n\t\t\t\tcase \"$dist_version\" in\n\t\t\t\t\t10)\n\t\t\t\t\t\tdist_version=\"buster\"\n\t\t\t\t\t;;\n\t\t\t\t\t9)\n\t\t\t\t\t\tdist_version=\"stretch\"\n\t\t\t\t\t;;\n\t\t\t\t\t8|'Kali Linux 2')\n\t\t\t\t\t\tdist_version=\"jessie\"\n\t\t\t\t\t;;\n\t\t\t\t\t7)\n\t\t\t\t\t\tdist_version=\"wheezy\"\n\t\t\t\t\t;;\n\t\t\t\tesac\n\t\t\telif [ -r /etc/redhat-release ] && [ \"$lsb_dist\" = \"\" ]; then\n\t\t\t\tlsb_dist=redhat\n\t\t\tfi\n\t\tfi\n\tfi\n}\n\ncommand_exists() {\n\tcommand -v \"$@\"\n}\n\ninit() {\n\tsh_c='sh -c'\n\tif [ \"$user\" != 'root' ]; then\n\t\tif command_exists sudo; then\n\t\t\tsh_c='sudo -E sh -c'\n\t\telif command_exists su; then\n\t\t\tsh_c='su -c'\n\t\telse\n\t\t\tcat >&2 <<-'EOF'\n\t\t\tError: this installer needs the ability to run commands as root.\n\t\t\tWe are unable to find either \"sudo\" or \"su\" available to make this happen.\n\t\t\tEOF\n\t\t\texit 1\n\t\tfi\n\tfi\n\n\tget_distribution\n\n\tcase \"$lsb_dist\" in\n\n\t\tubuntu)\n\t\t\tif command_exists lsb_release; then\n\t\t\t\tdist_version=\"$(lsb_release --codename | cut -f2)\"\n\t\t\tfi\n\t\t\tif [ -z \"$dist_version\" ] && [ -r /etc/lsb-release ]; then\n\t\t\t\tdist_version=\"$(. /etc/lsb-release && echo \"$DISTRIB_CODENAME\")\"\n\t\t\tfi\n\t\t;;\n\n\t\tdebian|raspbian)\n\t\t\tdist_version=\"$(sed 's/\\/.*//' /etc/debian_version | sed 's/\\..*//')\"\n\t\t\tcase \"$dist_version\" in\n\t\t\t\t10)\n\t\t\t\t\tdist_version=\"buster\"\n\t\t\t\t\t# Avoid https://stackoverflow.com/questions/68802802/repository-http-security-debian-org-debian-security-buster-updates-inrelease\n\t\t\t\t\t$sh_c \"apt-get update --allow-releaseinfo-change\"\n\t\t\t\t;;\n\t\t\t\t9)\n\t\t\t\t\tdist_version=\"stretch\"\n\t\t\t\t;;\n\t\t\t\t8)\n\t\t\t\t\tdist_version=\"jessie\"\n\t\t\t\t;;\n\t\t\t\t7)\n\t\t\t\t\tdist_version=\"wheezy\"\n\t\t\t\t;;\n\t\t\tesac\n\t\t;;\n\n\t\tcentos)\n\t\t\tif [ -z \"$dist_version\" ] && [ -r /etc/os-release ]; then\n\t\t\t\tdist_version=\"$(. /etc/os-release && echo \"$VERSION_ID\")\"\n\t\t\tfi\n\t\t;;\n\n\t\trhel|ol|sles)\n\t\t\tee_notice \"$lsb_dist\"\n\t\t\texit 1\n\t\t\t;;\n\n\t\t*)\n\t\t\tif command_exists lsb_release; then\n\t\t\t\tdist_version=\"$(lsb_release --release | cut -f2)\"\n\t\t\tfi\n\t\t\tif [ -z \"$dist_version\" ] && [ -r /etc/os-release ]; then\n\t\t\t\tdist_version=\"$(. /etc/os-release && echo \"$VERSION_ID\")\"\n\t\t\tfi\n\t\t;;\n\n\tesac\n\n\t# Check if this is a forked Linux distro\n\tcheck_forked\n\n\t# Check if we actually support this configuration\n\tif [ \"$lsb_dist\" = \"redhat\" ]; then\n\t\tcat >&2 <<-'EOF'\n\n\t\tSince Docker Community Edition is not supported for RedHat you have to procceed with installation manually.\n\t\tPlease visit the following URL for more detailed installation instructions:\n\n\t\thttps://iofog.org/install/RHEL\n\n\t\tEOF\n\t\texit 1\n\tfi\n\n}"),
	}
	file5 := &embedded.EmbeddedFile{
		Filename:    "agent/install_deps.sh",
		FileModTime: time.Unix(1681101988, 0),

		Content: string("#!/bin/sh\nset -x\nset -e\n\n/etc/iofog/agent/install_java.sh\n/etc/iofog/agent/install_docker.sh\n"),
	}
	file6 := &embedded.EmbeddedFile{
		Filename:    "agent/install_docker.sh",
		FileModTime: time.Unix(1708213929, 0),

		Content: string("#!/bin/sh\nset -x\nset -e\n\nstart_docker() {\n\tset +e\n\t# check if docker is running\n\tif ! $sh_c \"docker ps\" >/dev/null 2>&1; then\n\t\t# Try init.d\n\t\t$sh_c \"/etc/init.d/docker start\"\n\t\tlocal err_code=$?\n\t\t# Try systemd\n\t\tif [ $err_code -ne 0 ]; then\n\t\t\t$sh_c \"service docker start\"\n\t\t\terr_code=$?\n\t\tfi\n\t\t# Try snapd\n\t\tif [ $err_code -ne 0 ]; then\n\t\t\t$sh_c \"snap docker start\"\n\t\t\terr_code=$?\n\t\tfi\n\t\tif [ $err_code -ne 0 ]; then\n\t\t\techo \"Could not start Docker daemon\"\n\t\t\texit 1\n\t\tfi\n\tfi\n\tset -e\n}\n\ndo_configure_overlay() {\n\tlocal driver=\"$DOCKER_STORAGE_DRIVER\"\n\tif [ -z \"$driver\" ]; then\n\t\tdriver=\"overlay2\"\n\tfi\n\techo \"# Configuring /etc/systemd/system/docker.service.d/overlay.conf...\"\n\tif [ \"$lsb_dist\" = \"raspbian\" ] || [ \"$(uname -m)\" = \"armv7l\" ] || [ \"$(uname -m)\" = \"aarch64\" ] || [ \"$(uname -m)\" = \"armv8\" ]; then\n\t\tif [ ! -d \"/etc/systemd/system/docker.service.d\" ]; then\n\t\t\t$sh_c \"mkdir -p /etc/systemd/system/docker.service.d\"\n\t\tfi\n\t\tif [ ! -f \"/etc/systemd/system/docker.service.d/overlay.conf\" ] || ! grep -Fxq \"ExecStart=/usr/bin/dockerd --storage-driver $driver -H unix:// -H tcp://127.0.0.1:2375\" \"/etc/systemd/system/docker.service.d/overlay.conf\"; then\n\t\t\t$sh_c 'echo \"[Service]\" > /etc/systemd/system/docker.service.d/overlay.conf'\n\t\t\t$sh_c 'echo \"ExecStart=\" >> /etc/systemd/system/docker.service.d/overlay.conf'\n\t\t\t$sh_c \"echo \\\"ExecStart=/usr/bin/dockerd --storage-driver $driver -H unix:// -H tcp://127.0.0.1:2375\\\" >> /etc/systemd/system/docker.service.d/overlay.conf\"\n\t\tfi\n\t\t$sh_c \"systemctl daemon-reload\"\n\t\t$sh_c \"service docker restart\"\n\tfi\n}\n\ndo_install_docker() {\n\t# Check that Docker 18.09.2 or greater is installed\n\tif command_exists docker; then\n\t\tdocker_version=$(docker -v | sed 's/.*version \\(.*\\),.*/\\1/' | tr -d '.')\n\t\tif [ \"$docker_version\" -ge 18090 ]; then\n\t\t\techo \"# Docker $docker_version already installed\"\n\t\t\tstart_docker\n\t\t\tdo_configure_overlay\n\t\t\treturn\n\t\tfi\n\tfi\n\techo \"# Installing Docker...\"\n\tcase \"$dist_version\" in\n\t\t\"stretch\")\n\t\t\t$sh_c \"apt install -y apt-transport-https ca-certificates curl gnupg2 software-properties-common\"\n\t\t\tcurl -fsSL https://download.docker.com/linux/debian/gpg | $sh_c \"apt-key add -\"\n\t\t\t$sh_c \"sudo add-apt-repository \\\"deb [arch=amd64] https://download.docker.com/linux/debian $(lsb_release -cs) stable\\\"\"\n\t\t\t$sh_c \"apt-get update -y\"\n\t\t\t$sh_c \"sudo apt install -y docker-ce\"\n\t\t;;\n    7|8)\n      $sh_c \"sudo yum install -y yum-utils || echo 'yum-utils already installed'\"\n      $sh_c \"sudo yum-config-manager \\\n            --add-repo \\\n            https://download.docker.com/linux/centos/docker-ce.repo\"\n      $sh_c \"sudo yum install docker-ce docker-ce-cli containerd.io -y\"\n    ;;\n\t\t*)\n\t\t\tcurl -fsSL https://get.docker.com/ | sh\n\t\t;;\n\tesac\n\t\n\tif ! command_exists docker; then\n\t\techo \"Failed to install Docker\"\n\t\texit 1\n\tfi\n\tstart_docker\n\tdo_configure_overlay\n}\n\n. /etc/iofog/agent/init.sh\ninit\ndo_install_docker"),
	}
	file7 := &embedded.EmbeddedFile{
		Filename:    "agent/install_iofog.sh",
		FileModTime: time.Unix(1708209393, 0),

		Content: string("#!/bin/sh\nset -x\nset -e\n\ndo_check_install() {\n\tif command_exists iofog-agent; then\n\t\tlocal VERSION=$(sudo iofog-agent version | head -n1 | sed \"s/ioFog//g\" | tr -d ' ' | tr -d \"\\n\")\n\t\tif [ \"$VERSION\" = \"$agent_version\" ]; then\n\t\t\techo \"Agent $VERSION already installed.\"\n\t\t\texit 0\n\t\tfi\n\tfi\n}\n\ndo_stop_iofog() {\n\tif command_exists iofog-agent; then\n\t\tsudo service iofog-agent stop\n\tfi\n}\n\ndo_check_iofog_on_arm() {\n  if [ \"$lsb_dist\" = \"raspbian\" ] || [ \"$(uname -m)\" = \"armv7l\" ] || [ \"$(uname -m)\" = \"aarch64\" ] || [ \"$(uname -m)\" = \"armv8\" ]; then\n    echo \"# We re on ARM ($(uname -m)) : Updating config.xml to use correct docker_url\"\n    $sh_c 'sed -i -e \"s|<docker_url>.*</docker_url>|<docker_url>tcp://127.0.0.1:2375/</docker_url>|g\" /etc/iofog-agent/config.xml'\n\n    echo \"# Restarting iofog-agent service\"\n    $sh_c \"service iofog-agent stop\"\n    sleep 3\n    $sh_c \"service iofog-agent start\"\n fi\n}\n\ndo_install_iofog() {\n\tAGENT_CONFIG_FOLDER=/etc/iofog-agent\n\tSAVED_AGENT_CONFIG_FOLDER=/tmp/agent-config-save\n\t# PACKAGE_CLOUD_SCRIPT=package_cloud.sh\n\techo \"# Installing ioFog agent...\"\n\n\t# Save iofog-agent config\n\tif [ -d ${AGENT_CONFIG_FOLDER} ]; then\n\t\tsudo rm -rf ${SAVED_AGENT_CONFIG_FOLDER}\n\t\tsudo mkdir -p ${SAVED_AGENT_CONFIG_FOLDER}\n\t\tsudo cp -r ${AGENT_CONFIG_FOLDER}/* ${SAVED_AGENT_CONFIG_FOLDER}/\n\tfi\n\n\t#prefix=$([ -z \"$token\" ] && echo \"\" || echo \"$token:@\")\n\techo $lsb_dist\n\tif [ \"$lsb_dist\" = \"fedora\" ] || [ \"$lsb_dist\" = \"centos\" ]; then\n\n\t\tcd /etc/yum.repos.d ; curl https://downloads.datasance.com/datasance.repo -LO\n\t\t$sh_c \"yum update\"\n\t\t$sh_c \"yum install -y iofog-agent-$agent_version-1.noarch\"\n\telse\n    $sh_c \"apt install -qy debian-archive-keyring\"\n    $sh_c \"apt install -qy apt-transport-https\"\n\twget -qO- https://downloads.datasance.com/datasance.gpg |  tee /etc/apt/trusted.gpg.d/datasance.gpg >/dev/null\n\techo \"deb [arch=all signed-by=/etc/apt/trusted.gpg.d/datasance.gpg] https://downloads.datasance.com/deb stable main\" |  tee /etc/apt/sources.list.d/datansance.list >/dev/null\n    $sh_c \"apt update -qy\"\n    $sh_c \"apt install --allow-downgrades iofog-agent=$agent_version -qy\"\n\tfi\n\tdo_check_iofog_on_arm\n\n\t# Restore iofog-agent config\n\tif [ -d ${SAVED_AGENT_CONFIG_FOLDER} ]; then\n\t\tsudo mv ${SAVED_AGENT_CONFIG_FOLDER}/* ${AGENT_CONFIG_FOLDER}/\n\t\tsudo rmdir ${SAVED_AGENT_CONFIG_FOLDER}\n\tfi\n\tsudo chmod 775 ${AGENT_CONFIG_FOLDER}\n}\n\ndo_start_iofog(){\n\t# shellcheck disable=SC2261\n\tsudo service iofog-agent start > /dev/null 2&>1 &\n\tlocal STATUS=\"\"\n\tlocal ITER=0\n\twhile [ \"$STATUS\" != \"RUNNING\" ] ; do\n    ITER=$((ITER+1))\n    if [ \"$ITER\" -gt 60 ]; then\n      echo 'Timed out waiting for Agent to be RUNNING'\n      exit 1;\n    fi\n    sleep 1\n    STATUS=$(sudo iofog-agent status | cut -f2 -d: | head -n 1 | tr -d '[:space:]')\n    echo \"${STATUS}\"\n\tdone\n\tsudo iofog-agent \"config -cf 10 -sf 10\"\n}\n\nagent_version=\"$1\"\necho \"Using variables\"\necho \"version: $agent_version\"\n\n. /etc/iofog/agent/init.sh\ninit\ndo_check_install\ndo_stop_iofog\ndo_install_iofog\ndo_start_iofog"),
	}
	file8 := &embedded.EmbeddedFile{
		Filename:    "agent/install_java.sh",
		FileModTime: time.Unix(1708336815, 0),

		Content: string("#!/bin/sh\nset -x\nset -e\n\njava_major_version=0\njava_minor_version=0\ndo_check_install() {\n\tif command_exists java; then\n        java_major_version=\"$(java --version | head -n1 | awk '{print $2}' | cut -d. -f1)\"\n        java_minor_version=\"$(java --version | head -n1 | awk '{print $2}' | cut -d. -f2)\"\n\tfi\n\tif [ \"$java_major_version\" -ge \"17\" ]  && [ \"$java_minor_version\" -ge \"0\" ]; then\n\t\techo \"Java $java_major_version.$java_minor_version  already installed.\"\n\t\texit 0\n\tfi\n}\n\ndo_install_java() {\n\techo \"# Installing java 17...\"\n\techo \"\"\n\tos_arch=$(getconf LONG_BIT)\n\tis_arm=\"\"\n\tif [ \"$lsb_dist\" = \"raspbian\" ] || [ \"$(uname -m)\" = \"armv7l\" ] || [ \"$(uname -m)\" = \"aarch64\" ] || [ \"$(uname -m)\" = \"armv8\" ]; then\n\t\tis_arm=\"-arm\"\n\tfi\n\tcase \"$lsb_dist\" in\n\t\tubuntu)\n\t\t\t$sh_c \"apt-get update -y\"\n\t\t\t$sh_c \"apt install -y openjdk-17-jdk\"\n\t\t;;\n\t\tdebian|mendel)\n\t\t\t$sh_c \"apt-get update\"\n\t\t\t$sh_c \"apt install -y openjdk-17-jdk\"\n\t\t;;\n\t\traspbian)\n\t\t  $sh_c \"apt-get update\"\n\t\t  $sh_c \"apt-get install openjdk-17-jdk -y\"\n\t\t;;\n\t\tfedora|centos)\n\t\t\t$sh_c \"yum install -y java-17-openjdk\"\n\t\t;;\n\tesac\n}\n\ndo_install_deps() {\n\tlocal installer=\"\"\n\tcase \"$lsb_dist\" in\n\t\tubuntu|debian|raspbian)\n\t\t\tinstaller=\"apt\"\n\t\t;;\n\t\tfedora|centos)\n\t\t\tinstaller=\"yum\"\n\t\t;;\n\tesac\n\n\tlocal iter=0\n\twhile ! $sh_c \"$installer update\" && [ \"$iter\" -lt 6 ]; do\n\t\tsleep 5\n\t\titer=$((iter+1))\n\tdone\n}\n\n. /etc/iofog/agent/init.sh\ninit\ndo_check_install\ndo_install_deps\ndo_install_java"),
	}
	file9 := &embedded.EmbeddedFile{
		Filename:    "agent/uninstall_iofog.sh",
		FileModTime: time.Unix(1681101988, 0),

		Content: string("#!/bin/sh\nset -x\nset -e\n\nAGENT_CONFIG_FOLDER=/etc/iofog-agent/\nAGENT_LOG_FOLDER=/var/log/iofog-agent/\n\ndo_uninstall_iofog() {\n\techo \"# Removing ioFog agent...\"\n\n\tcase \"$lsb_dist\" in\n\t\tubuntu)\n\t\t\t$sh_c \"apt-get -y --purge autoremove iofog-agent\"\n\t\t\t;;\n\t\tfedora|centos)\n\t\t\t$sh_c \"yum remove -y iofog-agent\"\n\t\t\t;;\n\t\tdebian|raspbian)\n\t\t\t$sh_c \"apt-get -y --purge autoremove iofog-agent\"\n\t\t\t;;\n\tesac\n\n\t# Remove config files\n\t$sh_c \"rm -rf ${AGENT_CONFIG_FOLDER}\"\n\n\t# Remove log files\n\t$sh_c \"rm -rf ${AGENT_LOG_FOLDER}\"\n}\n\n. /etc/iofog/agent/init.sh\ninit\n\ndo_uninstall_iofog"),
	}
	fileb := &embedded.EmbeddedFile{
		Filename:    "controller/check_prereqs.sh",
		FileModTime: time.Unix(1681101988, 0),

		Content: string("#!/bin/sh\nset -x\n\n# Check can sudo without password\nif ! $(sudo ls /tmp/ > /dev/null); then\n\tMSG=\"Unable to successfully use sudo with user $USER on this host.\\nUser $USER must be in sudoers group and using sudo without password must be enabled.\\nPlease see iofog.org documentation for more details.\"\n\techo $MSG\n\texit 1\nfi\n"),
	}
	filec := &embedded.EmbeddedFile{
		Filename:    "controller/install_iofog.sh",
		FileModTime: time.Unix(1708206576, 0),

		Content: string("#!/bin/sh\nset -x\nset -e\n\nINSTALL_DIR=\"/opt/iofog\"\nTMP_DIR=\"/tmp/iofog\"\nETC_DIR=\"/etc/iofog/controller\"\n\ncontroller_service() {\n    USE_SYSTEMD=`grep -m1 -c systemd /proc/1/comm`\n    USE_INITCTL=`which initctl | wc -l`\n    USE_SERVICE=`which service | wc -l`\n\n    if [ $USE_SYSTEMD -eq 1 ]; then\n        cp \"$ETC_DIR/service/iofog-controller.systemd\" /etc/systemd/system/iofog-controller.service\n        chmod 644 /etc/systemd/system/iofog-controller.service\n        systemctl daemon-reload\n        systemctl enable iofog-controller.service\n    elif [ $USE_INITCTL -eq 1 ]; then\n        cp \"$ETC_DIR/service/iofog-controller.initctl\" /etc/init/iofog-controller.conf\n        initctl reload-configuration\n    elif [ $USE_SERVICE -eq 1 ]; then\n        cp \"$ETC_DIR/service/iofog-controller.update-rc\" /etc/init.d/iofog-controller\n        chmod +x /etc/init.d/iofog-controller\n        update-rc.d iofog-controller defaults\n    else\n        echo \"Unable to setup Controller startup script.\"\n    fi\n}\n\ninstall_package() {\n\t\tif [ -z \"$(command -v apt)\" ]; then\n\t\t\techo \"Unsupported distro\"\n\t\t\texit 1\n\t\tfi\n\t\tapt update -qq\n\t\tapt install -y $1\n}\n\ninstall_deps() {\n\tif [ -z \"$(command -v curl)\" ]; then\n        install_package \"curl\"\n\tfi\n\n\tif [ -z \"$(command -v lsof)\" ]; then\n        install_package \"lsof\"\n\tfi\n\n\tif [ -z \"$(command -v make)\" ]; then\n        install_package \"build-essential\"\n\tfi\n\n\tif [ -z \"$(command -v python2)\" ]; then\n        install_package \"python2\"\n\tfi\n\n\tif [ -z \"$(command -v python3)\" ]; then\n        install_package \"python3\"\n\tfi\n\n\tif [ -z \"$(command -v python-is-python3)\" ]; then\n        install_package \"python-is-python3\"\n\tfi\n}\n\ndeploy_controller() {\n\t# Nuke any existing instances\n\tif [ ! -z \"$(lsof -ti tcp:51121)\" ]; then\n\t\tlsof -ti tcp:51121 | xargs kill\n\tfi\n\n#\t If token is provided, set up private repo\n\tif [ ! -z $token ]; then\n\t\tif [ ! -z $(npmrc | grep iofog) ]; then\n\t\t\tnpmrc -c iofog\n\t\t\tnpmrc iofog\n\t\tfi\n\t\tcurl -s https://\"$token\":@packagecloud.io/install/repositories/\"$repo\"/script.node.sh?package_id=7463817 | force_npm=1 bash\n\t\tmv ~/.npmrc ~/.npmrcs/npmrc\n\t\tln -s ~/.npmrcs/npmrc ~/.npmrc\n\telse\n\t\tnpmrc default\n\tfi\n\t# Save DB\n\tif [ -f \"$INSTALL_DIR/controller/lib/node_modules/@datasance/iofogcontroller/package.json\" ]; then\n\t\t# If iofog-controller is not running, it will fail to stop - ignore that failure.\n\t\tnode $INSTALL_DIR/controller/lib/node_modules/@datasance/iofogcontroller/scripts/scripts-api.js preuninstall > /dev/null 2>&1 || true\n\tfi\n\n\t# Install in temporary location\n\tmkdir -p \"$TMP_DIR/controller\"\n\tchmod 0777 \"$TMP_DIR/controller\"\n\tif [ -z $version ]; then\n\t\tnpm install -g -f @datasance/iofogcontroller --unsafe-perm --prefix \"$TMP_DIR/controller\"\n\telse\n\t\tnpm install -g -f @datasance/iofogcontroller --unsafe-perm --prefix \"$TMP_DIR/controller\"\n\tfi\n\t# Move files into $INSTALL_DIR/controller\n\tmkdir -p \"$INSTALL_DIR/\"\n\trm -rf \"$INSTALL_DIR/controller\" # Clean possible previous install\n\tmv \"$TMP_DIR/controller/\" \"$INSTALL_DIR/\"\n\n\t# Restore DB\n\tif [ -f \"$INSTALL_DIR/controller/lib/node_modules/@datasance/iofogcontroller/package.json\" ]; then\n\t\tnode $INSTALL_DIR/controller/lib/node_modules/@datasance/iofogcontroller/scripts/scripts-api.js postinstall > /dev/null 2>&1 || true\n\tfi\n\n\t# Symbolic links\n\tif [ ! -f \"/usr/local/bin/iofog-controller\" ]; then\n\t\tln -fFs \"$INSTALL_DIR/controller/bin/iofog-controller\" /usr/local/bin/iofog-controller\n\tfi\n\n\t# Set controller permissions\n\tchmod 744 -R \"$INSTALL_DIR/controller\"\n\n\t# Startup script\n\tcontroller_service\n\n\t# Run controller\n\t. /opt/iofog/config/controller/env.sh\n\tiofog-controller start\n}\n\n# main\nversion=\"$1\"\nrepo=$([ -z \"$2\" ] && echo \"iofog/iofog-controller-snapshots\" || echo \"$2\")\ntoken=\"$3\"\n\ninstall_deps\ndeploy_controller\n"),
	}
	filed := &embedded.EmbeddedFile{
		Filename:    "controller/install_node.sh",
		FileModTime: time.Unix(1681101988, 0),

		Content: string("#!/bin/sh\nset -x\nset -e\n\nload_existing_nvm() {\n\tset +e\n\tif [ -z \"$(command -v nvm)\" ]; then\n\t\texport NVM_DIR=\"${HOME}/.nvm\"\n\t\tmkdir -p $NVM_DIR\n\t\tif [ -f \"$NVM_DIR/nvm.sh\" ]; then\n\t\t\t[ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\" # This loads nvm\n\t\tfi\n\tfi\n\tset -e\n}\n\ninstall_node() {\n\tload_existing_nvm\n\tif [ -z \"$(command -v nvm)\" ]; then\n\t\tcurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash\n\t\texport NVM_DIR=\"${HOME}/.nvm\"\n\t\t[ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\"\n\tfi\n\tnvm install  v18.15.0\n\tnvm use  v18.15.0\n\tln -Ffs $(which node) /usr/local/bin/node\n\tln -Ffs $(which npm) /usr/local/bin/npm\n\n\t# npmrc\n\tif [ -z \"$(command -v npmrc)\" ]; then\n\t\tnpm i npmrc -g\n\tfi\n\tln -Ffs $(which npmrc) /usr/local/bin/npmrc\n}\n\ninstall_node"),
	}
	filef := &embedded.EmbeddedFile{
		Filename:    "controller/service/iofog-controller.initctl",
		FileModTime: time.Unix(1681101988, 0),

		Content: string("description \"ioFog Controller\"\n\nstart on (runlevel [2345])\nstop on (runlevel [!2345])\n\nrespawn\n\nscript\n  . /opt/iofog/config/controller/env.sh\n  exec /usr/local/bin/iofog-controller start\nend script"),
	}
	fileg := &embedded.EmbeddedFile{
		Filename:    "controller/service/iofog-controller.systemd",
		FileModTime: time.Unix(1681101988, 0),

		Content: string("[Unit]\nDescription=ioFog Controller\n\n[Service]\nType=forking\nExecStart=/usr/local/bin/iofog-controller start\nExecStop=/usr/local/bin/iofog-controller stop\nEnvironmentFile=/opt/iofog/config/controller/env.env\n\n[Install]\nWantedBy=multi-user.target\n"),
	}
	fileh := &embedded.EmbeddedFile{
		Filename:    "controller/service/iofog-controller.update-rc",
		FileModTime: time.Unix(1681101988, 0),

		Content: string("#!/bin/sh\n\ncase \"$1\" in\n  start)\n    . /opt/iofog/controller/env.env\n    /usr/local/bin/iofog-controller start\n    ;;\n  stop)\n    /usr/local/bin/iofog-controller stop\n    ;;\n  restart)\n    /usr/local/bin/iofog-controller stop\n    . /opt/iofog/config/controller/env.sh\n    /usr/local/bin/iofog-controller start\n    ;;\n  *)\n    echo \"Usage: $0 {start|stop|restart}\"\nesac\n"),
	}
	filei := &embedded.EmbeddedFile{
		Filename:    "controller/set_env.sh",
		FileModTime: time.Unix(1681101988, 0),

		Content: string("#!/bin/sh\nset -x\nset -e\n\nCONF_FOLDER=/opt/iofog/config/controller\nSOURCE_FILE_NAME=env.sh # Used to source env variables\nENV_FILE_NAME=env.env # Used as an env file in systemd\n\nSOURCE_FILE=\"$CONF_FOLDER/$SOURCE_FILE_NAME\"\nENV_FILE=\"$CONF_FOLDER/$ENV_FILE_NAME\"\n\n# Create folder\nmkdir -p \"$CONF_FOLDER\"\n\n# Source file\necho \"#!/bin/sh\" > \"$SOURCE_FILE\"\n\n# Env file (for systemd)\nrm -f \"$ENV_FILE\"\ntouch \"$ENV_FILE\"\n\nfor var in \"$@\"\ndo\n  echo \"export $var\" >> \"$SOURCE_FILE\"\n  echo \"$var\" >> \"$ENV_FILE\"\ndone"),
	}
	filej := &embedded.EmbeddedFile{
		Filename:    "controller/uninstall_iofog.sh",
		FileModTime: time.Unix(1681101988, 0),

		Content: string("#!/bin/sh\nset -x\nset -e\n\nCONTROLLER_DIR=\"/opt/iofog/controller/\"\nCONTROLLER_LOG_DIR=\"/var/log/iofog/\"\n\ndo_uninstall_controller() {\n  # Remove folders\n  sudo rm -rf $CONTROLLER_DIR\n  sudo rm -rf $CONTROLLER_LOG_DIR\n\n  # Remove symbolic links\n  rm -f /usr/local/bin/iofog-controller\n\n  # Remove service files\n  USE_SYSTEMD=`grep -m1 -c systemd /proc/1/comm`\n  USE_INITCTL=`which initctl | wc -l`\n  USE_SERVICE=`which service | wc -l`\n\n  if [ $USE_SYSTEMD -eq 1 ]; then\n    systemctl stop iofog-controller.service\n    rm -f /etc/systemd/system/iofog-controller.service\n  elif [ $USE_INITCTL -eq 1 ]; then\n    rm -f /etc/init/iofog-controller.conf\n  elif [ $USE_SERVICE -eq 1 ]; then\n    rm -f /etc/init.d/iofog-controller\n  else\n    echo \"Unable to setup Controller startup script.\"\n  fi\n}\n\ndo_uninstall_controller"),
	}
	filel := &embedded.EmbeddedFile{
		Filename:    "database/db_migration_v1.0.0.sql",
		FileModTime: time.Unix(1711642313, 0),

		Content: string("START TRANSACTION;\n\nCREATE TABLE Flows (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(255) UNIQUE,\n    description VARCHAR(255) DEFAULT '',\n    is_activated BOOLEAN DEFAULT false,\n    is_system BOOLEAN DEFAULT false,\n    created_at DATETIME,\n    updated_at DATETIME\n);\n\nCREATE TABLE IF NOT EXISTS Registries (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    url VARCHAR(255),\n    is_public BOOLEAN,\n    secure BOOLEAN,\n    certificate TEXT,\n    requires_cert BOOLEAN,\n    user_name TEXT,\n    password TEXT,\n    user_email TEXT\n);\n\n\nCREATE TABLE IF NOT EXISTS CatalogItems (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(255) UNIQUE,\n    description VARCHAR(255),\n    category TEXT,\n    config_example VARCHAR(255) DEFAULT '{}',\n    publisher TEXT,\n    disk_required BIGINT DEFAULT 0,\n    ram_required BIGINT DEFAULT 0,\n    picture VARCHAR(255) DEFAULT 'images/shared/default.png',\n    is_public BOOLEAN DEFAULT false,\n    registry_id INT,\n    FOREIGN KEY (registry_id) REFERENCES Registries (id) ON DELETE SET NULL\n);\n\nCREATE INDEX idx_catalog_item_registry_id ON CatalogItems (registry_id);\n\n\nCREATE TABLE IF NOT EXISTS FogTypes (\n    id INT PRIMARY KEY,\n    name TEXT,\n    image TEXT,\n    description TEXT,\n    network_catalog_item_id INT,\n    hal_catalog_item_id INT,\n    bluetooth_catalog_item_id INT,\n    FOREIGN KEY (network_catalog_item_id) REFERENCES CatalogItems (id) ON DELETE CASCADE,\n    FOREIGN KEY (hal_catalog_item_id) REFERENCES CatalogItems (id) ON DELETE CASCADE,\n    FOREIGN KEY (bluetooth_catalog_item_id) REFERENCES CatalogItems (id) ON DELETE CASCADE\n);\n\nCREATE INDEX idx_fog_type_network_catalog_item_id ON FogTypes (network_catalog_item_id);\nCREATE INDEX idx_fog_type_hal_catalog_item_id ON FogTypes (hal_catalog_item_id);\nCREATE INDEX idx_fog_type_bluetooth_catalog_item_id ON FogTypes (bluetooth_catalog_item_id);\n\n\nCREATE TABLE IF NOT EXISTS Fogs (\n    uuid VARCHAR(32) PRIMARY KEY NOT NULL,\n    name VARCHAR(255) DEFAULT 'Unnamed ioFog 1',\n    location TEXT,\n    gps_mode TEXT,\n    latitude FLOAT,\n    longitude FLOAT,\n    description TEXT,\n    last_active BIGINT,\n    daemon_status VARCHAR(32) DEFAULT 'UNKNOWN',\n    daemon_operating_duration BIGINT DEFAULT 0,\n    daemon_last_start BIGINT,\n    memory_usage FLOAT DEFAULT 0.000,\n    disk_usage FLOAT DEFAULT 0.000,\n    cpu_usage FLOAT DEFAULT 0.00,\n    memory_violation TEXT,\n    disk_violation TEXT,\n    cpu_violation TEXT,\n    `system-available-disk` BIGINT,\n    `system-available-memory` BIGINT,\n    `system-total-cpu` FLOAT,\n    security_status VARCHAR(32) DEFAULT 'OK',\n    security_violation_info VARCHAR(32) DEFAULT 'No violation',\n    catalog_item_status TEXT,\n    repository_count BIGINT DEFAULT 0,\n    repository_status TEXT,\n    system_time BIGINT,\n    last_status_time BIGINT,\n    ip_address VARCHAR(32) DEFAULT '0.0.0.0',\n    ip_address_external VARCHAR(32) DEFAULT '0.0.0.0',\n    host VARCHAR(32),\n    processed_messages BIGINT DEFAULT 0,\n    catalog_item_message_counts TEXT,\n    message_speed FLOAT DEFAULT 0.000,\n    last_command_time BIGINT,\n    network_interface VARCHAR(32) DEFAULT 'eth0',\n    docker_url VARCHAR(255) DEFAULT 'unix:///var/run/docker.sock',\n    disk_limit FLOAT DEFAULT 50,\n    disk_directory VARCHAR(255) DEFAULT '/var/lib/iofog/',\n    memory_limit FLOAT DEFAULT 4096,\n    cpu_limit FLOAT DEFAULT 80,\n    log_limit FLOAT DEFAULT 10,\n    log_directory VARCHAR(255) DEFAULT '/var/log/iofog/',\n    bluetooth BOOLEAN DEFAULT FALSE,\n    hal BOOLEAN DEFAULT FALSE,\n    log_file_count BIGINT DEFAULT 10,\n    `version` TEXT,\n    is_ready_to_upgrade BOOLEAN DEFAULT TRUE,\n    is_ready_to_rollback BOOLEAN DEFAULT FALSE,\n    status_frequency INT DEFAULT 10,\n    change_frequency INT DEFAULT 20,\n    device_scan_frequency INT DEFAULT 20,\n    tunnel VARCHAR(255) DEFAULT '',\n    isolated_docker_container BOOLEAN DEFAULT TRUE,\n    docker_pruning_freq INT DEFAULT 1,\n    available_disk_threshold FLOAT DEFAULT 20,\n    log_level VARCHAR(255) DEFAULT 'INFO',\n    is_system BOOLEAN DEFAULT FALSE,\n    router_id INT DEFAULT 0,\n    time_zone TEXT,\n    created_at DATETIME,\n    updated_at DATETIME,\n    fog_type_id INT DEFAULT 0,\n    FOREIGN KEY (fog_type_id) REFERENCES FogTypes (id)\n);\n\nCREATE INDEX idx_fog_fog_type_id ON Fogs (fog_type_id);\n\nCREATE TABLE IF NOT EXISTS ChangeTrackings (\n    id INT AUTO_INCREMENT PRIMARY KEY NOT NULL,\n    microservice_config BOOLEAN DEFAULT false,\n    reboot BOOLEAN DEFAULT false,\n    deletenode BOOLEAN DEFAULT false,\n    version BOOLEAN DEFAULT false,\n    microservice_list BOOLEAN DEFAULT false,\n    config BOOLEAN DEFAULT false,\n    routing BOOLEAN DEFAULT false,\n    registries BOOLEAN DEFAULT false,\n    tunnel BOOLEAN DEFAULT false,\n    diagnostics BOOLEAN DEFAULT false,\n    router_changed BOOLEAN DEFAULT false,\n    image_snapshot BOOLEAN DEFAULT false,\n    prune BOOLEAN DEFAULT false,\n    linked_edge_resources BOOLEAN DEFAULT false,\n    last_updated VARCHAR(255) DEFAULT false,\n    iofog_uuid VARCHAR(32),\n    FOREIGN KEY (iofog_uuid) REFERENCES Fogs (uuid) ON DELETE CASCADE\n);\n\nCREATE INDEX idx_change_tracking_iofog_uuid ON ChangeTrackings (iofog_uuid);\n\nCREATE TABLE IF NOT EXISTS FogAccessTokens (\n    id INT AUTO_INCREMENT PRIMARY KEY NOT NULL,\n    expiration_time BIGINT,\n    token TEXT,\n    iofog_uuid VARCHAR(32),\n    FOREIGN KEY (iofog_uuid) REFERENCES Fogs (uuid) ON DELETE CASCADE\n);\n\nCREATE INDEX idx_fog_access_tokens_iofogUuid ON FogAccessTokens (iofog_uuid);\n\nCREATE TABLE IF NOT EXISTS FogProvisionKeys (\n    id INT AUTO_INCREMENT PRIMARY KEY NOT NULL,\n    provisioning_string VARCHAR(100),\n    expiration_time BIGINT,\n    iofog_uuid VARCHAR(32),\n    FOREIGN KEY (iofog_uuid) REFERENCES Fogs (uuid) ON DELETE CASCADE\n);\n\nCREATE INDEX idx_fog_provision_keys_iofogUuid ON FogProvisionKeys (iofog_uuid);\n\nCREATE TABLE IF NOT EXISTS FogVersionCommands (\n    id INT AUTO_INCREMENT PRIMARY KEY NOT NULL,\n    version_command VARCHAR(100),\n    iofog_uuid VARCHAR(32),\n    FOREIGN KEY (iofog_uuid) REFERENCES Fogs (uuid) ON DELETE CASCADE\n);\n\nCREATE INDEX idx_fog_version_commands_iofogUuid ON FogVersionCommands (iofog_uuid);\n\nCREATE TABLE IF NOT EXISTS HWInfos (\n    id INT AUTO_INCREMENT PRIMARY KEY NOT NULL,\n    info TEXT,\n    created_at DATETIME,\n    updated_at DATETIME,\n    iofog_uuid VARCHAR(32),\n    FOREIGN KEY (iofog_uuid) REFERENCES Fogs (uuid) ON DELETE CASCADE\n);\n\nCREATE INDEX idx_hw_infos_iofogUuid ON HWInfos (iofog_uuid);\n\nCREATE TABLE IF NOT EXISTS USBInfos (\n    id INT AUTO_INCREMENT PRIMARY KEY NOT NULL,\n    info TEXT,\n    created_at DATETIME,\n    updated_at DATETIME,\n    iofog_uuid VARCHAR(32),\n    FOREIGN KEY (iofog_uuid) REFERENCES Fogs (uuid) ON DELETE CASCADE\n);\n\nCREATE INDEX idx_usb_infos_iofogUuid ON USBInfos (iofog_uuid);\n\nCREATE TABLE IF NOT EXISTS Tunnels (\n    id INT AUTO_INCREMENT PRIMARY KEY NOT NULL,\n    username TEXT,\n    password TEXT,\n    host TEXT,\n    remote_port INT,\n    local_port INT DEFAULT 22,\n    rsa_key TEXT,\n    closed BOOLEAN DEFAULT false,\n    iofog_uuid VARCHAR(32),\n    FOREIGN KEY (iofog_uuid) REFERENCES Fogs (uuid) ON DELETE CASCADE\n);\n\nCREATE INDEX idx_tunnels_iofogUuid ON Tunnels (iofog_uuid);\n\nCREATE TABLE IF NOT EXISTS Microservices (\n    uuid VARCHAR(32) PRIMARY KEY NOT NULL,\n    config VARCHAR(255) DEFAULT '{}',\n    name VARCHAR(255) DEFAULT 'New Microservice',\n    config_last_updated BIGINT,\n    is_network BOOLEAN DEFAULT false,\n    rebuild BOOLEAN DEFAULT false,\n    root_host_access BOOLEAN DEFAULT false,\n    log_size BIGINT DEFAULT 0,\n    image_snapshot VARCHAR(255) DEFAULT '',\n    `delete` BOOLEAN DEFAULT false,\n    delete_with_cleanup BOOLEAN DEFAULT false,\n    created_at DATETIME,\n    updated_at DATETIME,\n    catalog_item_id INT,\n    registry_id INT DEFAULT 1,\n    iofog_uuid VARCHAR(32),\n    application_id INT,\n    FOREIGN KEY (catalog_item_id) REFERENCES CatalogItems (id) ON DELETE CASCADE,\n    FOREIGN KEY (registry_id) REFERENCES Registries (id) ON DELETE SET NULL,\n    FOREIGN KEY (iofog_uuid) REFERENCES Fogs (uuid) ON DELETE CASCADE,\n    FOREIGN KEY (application_id) REFERENCES Flows (id) ON DELETE CASCADE\n);\n\nCREATE INDEX idx_microservices_catalogItemId ON Microservices (catalog_item_id);\nCREATE INDEX idx_microservices_registryId ON Microservices (registry_id);\nCREATE INDEX idx_microservices_iofogUuid ON Microservices (iofog_uuid);\nCREATE INDEX idx_microservices_applicationId ON Microservices (application_id);\n\nCREATE TABLE IF NOT EXISTS MicroserviceArgs (\n    id INT AUTO_INCREMENT PRIMARY KEY NOT NULL,\n    cmd TEXT,\n    microservice_uuid VARCHAR(32),\n    FOREIGN KEY (microservice_uuid) REFERENCES Microservices (uuid) ON DELETE CASCADE\n);\n\nCREATE INDEX idx_microservice_args_microserviceUuid ON MicroserviceArgs (microservice_uuid);\n\nCREATE TABLE IF NOT EXISTS MicroserviceEnvs (\n    id INT AUTO_INCREMENT PRIMARY KEY NOT NULL,\n    `key` TEXT,\n    `value` TEXT,\n    microservice_uuid VARCHAR(32),\n    FOREIGN KEY (microservice_uuid) REFERENCES Microservices (uuid) ON DELETE CASCADE\n);\n\nCREATE INDEX idx_microservice_envs_microserviceUuid ON MicroserviceEnvs (microservice_uuid);\n\nCREATE TABLE IF NOT EXISTS MicroserviceExtraHost (\n    id INT AUTO_INCREMENT PRIMARY KEY NOT NULL,\n    template_type TEXT,\n    name TEXT,\n    public_port INT,\n    template TEXT,\n    `value` TEXT,\n    microservice_uuid VARCHAR(32),\n    target_microservice_uuid VARCHAR(32),\n    target_fog_uuid VARCHAR(32),\n    FOREIGN KEY (microservice_uuid) REFERENCES Microservices (uuid) ON DELETE CASCADE,\n    FOREIGN KEY (target_microservice_uuid) REFERENCES Microservices (uuid) ON DELETE CASCADE,\n    FOREIGN KEY (target_fog_uuid) REFERENCES Fogs (uuid) ON DELETE CASCADE\n);\n\nCREATE INDEX idx_microservice_extra_host_microserviceUuid ON MicroserviceExtraHost (microservice_uuid);\nCREATE INDEX idx_microservice_extra_host_targetMicroserviceUuid ON MicroserviceExtraHost (target_microservice_uuid);\nCREATE INDEX idx_microservice_extra_host_targetFogUuid ON MicroserviceExtraHost (target_fog_uuid);\n\nCREATE TABLE IF NOT EXISTS MicroservicePorts (\n    id INT AUTO_INCREMENT PRIMARY KEY NOT NULL,\n    port_internal INT,\n    port_external INT,\n    is_udp BOOLEAN,\n    is_public BOOLEAN,\n    is_proxy BOOLEAN,\n    created_at DATETIME,\n    updated_at DATETIME,\n    microservice_uuid VARCHAR(32),\n    FOREIGN KEY (microservice_uuid) REFERENCES Microservices (uuid) ON DELETE CASCADE\n);\n\nCREATE INDEX idx_microservice_port_microserviceUuid ON MicroservicePorts (microservice_uuid);\n\nCREATE TABLE IF NOT EXISTS MicroserviceProxyPorts (\n    id INT AUTO_INCREMENT PRIMARY KEY NOT NULL,\n    port_id INT,\n    host TEXT,\n    local_proxy_id TEXT,\n    public_port INT,\n    admin_port INT,\n    protocol TEXT,\n    proxy_token TEXT,\n    port_uuid TEXT,\n    server_token TEXT,\n    created_at DATETIME,\n    updated_at DATETIME,\n    FOREIGN KEY (port_id) REFERENCES MicroservicePorts (id) ON DELETE CASCADE\n);\n\nCREATE INDEX idx_microservice_proxy_port_portId ON MicroserviceProxyPorts (port_id);\n\nCREATE TABLE IF NOT EXISTS MicroservicePublicModes (\n    id INT AUTO_INCREMENT PRIMARY KEY NOT NULL,\n    microservice_uuid VARCHAR(32),\n    network_microservice_uuid VARCHAR(32),\n    iofog_uuid VARCHAR(32),\n    microservice_port_id INT,\n    FOREIGN KEY (microservice_uuid) REFERENCES Microservices (uuid) ON DELETE CASCADE,\n    FOREIGN KEY (network_microservice_uuid) REFERENCES Microservices (uuid) ON DELETE SET NULL,\n    FOREIGN KEY (iofog_uuid) REFERENCES Fogs (uuid) ON DELETE SET NULL,\n    FOREIGN KEY (microservice_port_id) REFERENCES MicroservicePorts (id) ON DELETE SET NULL\n);\n\nCREATE INDEX idx_microservice_public_mode_microserviceUuid ON MicroservicePublicModes (microservice_uuid);\nCREATE INDEX idx_microservice_public_mode_networkMicroserviceUuid ON MicroservicePublicModes (network_microservice_uuid);\nCREATE INDEX idx_microservice_public_mode_iofogUuid ON MicroservicePublicModes (iofog_uuid);\nCREATE INDEX idx_microservice_public_mode_microservicePortId ON MicroservicePublicModes (microservice_port_id);\n\nCREATE TABLE IF NOT EXISTS MicroservicePublicPorts (\n    id INT AUTO_INCREMENT PRIMARY KEY NOT NULL,\n    port_id INT UNIQUE,\n    host_id VARCHAR(255) UNIQUE,\n    local_proxy_id TEXT,\n    remote_proxy_id TEXT,\n    public_port INT,\n    queue_name TEXT,\n    schemes VARCHAR(255) DEFAULT '[\"https\"]',\n    is_tcp BOOLEAN DEFAULT false,\n    created_at DATETIME,\n    updated_at DATETIME,\n    protocol VARCHAR(255) AS (CASE WHEN is_tcp THEN 'tcp' ELSE 'http' END) VIRTUAL,\n    FOREIGN KEY (port_id) REFERENCES MicroservicePorts (id) ON DELETE CASCADE,\n    FOREIGN KEY (host_id) REFERENCES Fogs (uuid) ON DELETE CASCADE\n);\n\nCREATE INDEX idx_microservice_public_port_portId ON MicroservicePublicPorts (port_id);\nCREATE INDEX idx_microservice_public_port_hostId ON MicroservicePublicPorts (host_id);\n\n\nCREATE TABLE IF NOT EXISTS MicroserviceStatuses (\n    id INT AUTO_INCREMENT PRIMARY KEY NOT NULL,\n    status VARCHAR(255) DEFAULT 'QUEUED',\n    operating_duration BIGINT DEFAULT 0,\n    start_time BIGINT DEFAULT 0,\n    cpu_usage FLOAT DEFAULT 0.000,\n    memory_usage BIGINT DEFAULT 0,\n    container_id VARCHAR(255) DEFAULT '',\n    percentage FLOAT DEFAULT 0.00,\n    error_message VARCHAR(255) DEFAULT '',\n    microservice_uuid VARCHAR(32),\n    created_at DATETIME,\n    updated_at DATETIME,\n    FOREIGN KEY (microservice_uuid) REFERENCES Microservices (uuid) ON DELETE CASCADE\n);\n\nCREATE INDEX idx_microservice_status_microserviceUuid ON MicroserviceStatuses (microservice_uuid);\n\nCREATE TABLE IF NOT EXISTS StraceDiagnostics (\n    id INT AUTO_INCREMENT PRIMARY KEY NOT NULL,\n    strace_run BOOLEAN,\n    buffer VARCHAR(255) DEFAULT '',\n    microservice_uuid VARCHAR(32),\n    FOREIGN KEY (microservice_uuid) REFERENCES Microservices (uuid) ON DELETE CASCADE\n);\n\nCREATE INDEX idx_strace_diagnostics_microserviceUuid ON StraceDiagnostics (microservice_uuid);\n\nCREATE TABLE IF NOT EXISTS VolumeMappings (\n    uuid INT AUTO_INCREMENT PRIMARY KEY NOT NULL,\n    host_destination TEXT,\n    container_destination TEXT,\n    access_mode TEXT,\n    type TEXT,\n    microservice_uuid VARCHAR(32),\n    FOREIGN KEY (microservice_uuid) REFERENCES Microservices (uuid) ON DELETE CASCADE\n);\n\nCREATE INDEX idx_volume_mappings_microserviceUuid ON VolumeMappings (microservice_uuid);\n\n\nCREATE TABLE IF NOT EXISTS CatalogItemImages (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    container_image TEXT,\n    catalog_item_id INT,\n    microservice_uuid VARCHAR(32),\n    fog_type_id INT,\n    FOREIGN KEY (catalog_item_id) REFERENCES CatalogItems (id) ON DELETE CASCADE,\n    FOREIGN KEY (microservice_uuid) REFERENCES Microservices (uuid) ON DELETE CASCADE,\n    FOREIGN KEY (fog_type_id) REFERENCES FogTypes (id) ON DELETE CASCADE\n);\n\nCREATE INDEX idx_catalog_item_image_catalog_item_id ON CatalogItemImages (catalog_item_id);\nCREATE INDEX idx_catalog_item_image_microservice_uuid ON CatalogItemImages (microservice_uuid);\nCREATE INDEX idx_catalog_item_image_fog_type_id ON CatalogItemImages (fog_type_id);\n\nCREATE TABLE IF NOT EXISTS CatalogItemInputTypes (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    info_type TEXT,\n    info_format TEXT,\n    catalog_item_id INT,\n    FOREIGN KEY (catalog_item_id) REFERENCES CatalogItems (id) ON DELETE CASCADE\n);\n\nCREATE INDEX idx_catalog_item_input_type_catalog_item_id ON CatalogItemInputTypes (catalog_item_id);\n\nCREATE TABLE IF NOT EXISTS CatalogItemOutputTypes (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    info_type TEXT,\n    info_format TEXT,\n    catalog_item_id INT,\n    FOREIGN KEY (catalog_item_id) REFERENCES CatalogItems (id) ON DELETE CASCADE\n);\n\nCREATE INDEX idx_catalog_item_output_type_catalog_item_id ON CatalogItemOutputTypes (catalog_item_id);\n\n\nCREATE TABLE IF NOT EXISTS Routings (\n    id INT AUTO_INCREMENT PRIMARY KEY NOT NULL,\n    name TEXT NOT NULL,\n    is_network_connection BOOLEAN DEFAULT false,\n    source_microservice_uuid VARCHAR(32),\n    dest_microservice_uuid VARCHAR(32),\n    source_network_microservice_uuid VARCHAR(32),\n    dest_network_microservice_uuid VARCHAR(32),\n    source_iofog_uuid VARCHAR(32),\n    dest_iofog_uuid VARCHAR(32),\n    application_id INT,\n    FOREIGN KEY (source_microservice_uuid) REFERENCES Microservices (uuid) ON DELETE CASCADE,\n    FOREIGN KEY (dest_microservice_uuid) REFERENCES Microservices (uuid) ON DELETE CASCADE,\n    FOREIGN KEY (source_network_microservice_uuid) REFERENCES Microservices (uuid) ON DELETE SET NULL,\n    FOREIGN KEY (dest_network_microservice_uuid) REFERENCES Microservices (uuid) ON DELETE SET NULL,\n    FOREIGN KEY (source_iofog_uuid) REFERENCES Fogs (uuid) ON DELETE SET NULL,\n    FOREIGN KEY (dest_iofog_uuid) REFERENCES Fogs (uuid) ON DELETE SET NULL,\n    FOREIGN KEY (application_id) REFERENCES Flows (id) ON DELETE CASCADE\n);\n\nCREATE INDEX idx_routing_sourceMicroserviceUuid ON Routings (source_microservice_uuid);\nCREATE INDEX idx_routing_destMicroserviceUuid ON Routings (dest_microservice_uuid);\nCREATE INDEX idx_routing_sourceNetworkMicroserviceUuid ON Routings (source_network_microservice_uuid);\nCREATE INDEX idx_routing_destNetworkMicroserviceUuid ON Routings (dest_network_microservice_uuid);\nCREATE INDEX idx_routing_sourceIofogUuid ON Routings (source_iofog_uuid);\nCREATE INDEX idx_routing_destIofogUuid ON Routings (dest_iofog_uuid);\nCREATE INDEX idx_routing_applicationId ON Routings (application_id);\n\nCREATE TABLE IF NOT EXISTS Routers (\n    id INT AUTO_INCREMENT PRIMARY KEY NOT NULL,\n    is_edge BOOLEAN DEFAULT true,\n    messaging_port INT DEFAULT 5672,\n    edge_router_port INT,\n    inter_router_port INT,\n    host TEXT,\n    is_default BOOLEAN DEFAULT false,\n    iofog_uuid VARCHAR(32),\n    created_at DATETIME,\n    updated_at DATETIME,\n    FOREIGN KEY (iofog_uuid) REFERENCES Fogs (uuid) ON DELETE CASCADE\n    \n);\n\nCREATE INDEX idx_router_iofogUuid ON Routers (iofog_uuid);\n\n\nCREATE TABLE RouterConnections (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    source_router INT,\n    dest_router INT,\n    created_at DATETIME NOT NULL,\n    updated_at DATETIME NOT NULL,\n    FOREIGN KEY (source_router) REFERENCES Routers(id) ON DELETE CASCADE,\n    FOREIGN KEY (dest_router) REFERENCES Routers(id) ON DELETE CASCADE\n);\n\nCREATE INDEX idx_routerconnections_sourceRouter ON RouterConnections (source_router);\nCREATE INDEX idx_routerconnections_destRouter ON RouterConnections (dest_router);\n\n\n\nCREATE TABLE IF NOT EXISTS Config (\n    id INT AUTO_INCREMENT PRIMARY KEY NOT NULL,\n    `key` VARCHAR(255) NOT NULL UNIQUE,\n    value VARCHAR(255) NOT NULL,\n    created_at DATETIME,\n    updated_at DATETIME\n);\n\nCREATE INDEX idx_config_key ON Config (`key`);\n\n\nCREATE TABLE IF NOT EXISTS Tags (\n    id INT AUTO_INCREMENT PRIMARY KEY NOT NULL,\n    value VARCHAR(255) UNIQUE NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS IofogTags (\n    id INT AUTO_INCREMENT PRIMARY KEY NOT NULL,\n    fog_uuid VARCHAR(32),\n    tag_id INT,\n    FOREIGN KEY (fog_uuid) REFERENCES Fogs (uuid) ON DELETE CASCADE,\n    FOREIGN KEY (tag_id) REFERENCES Tags (id) ON DELETE CASCADE\n);\n\nCREATE INDEX idx_iofogtags_fog_uuid ON IofogTags (fog_uuid);\nCREATE INDEX idx_iofogtags_tag_id ON IofogTags (tag_id);\n\nCREATE TABLE IF NOT EXISTS EdgeResources (\n    id INT AUTO_INCREMENT PRIMARY KEY NOT NULL,\n    name VARCHAR(255) NOT NULL,\n    version TEXT,\n    description TEXT,\n    display_name TEXT,\n    display_color TEXT,\n    display_icon TEXT,\n    interface_protocol TEXT,\n    interface_id INT,\n    custom TEXT\n);\n\n\nCREATE TABLE IF NOT EXISTS AgentEdgeResources (\n    id INT AUTO_INCREMENT PRIMARY KEY NOT NULL,\n    fog_uuid VARCHAR(32),\n    edge_resource_id INT,\n    FOREIGN KEY (fog_uuid) REFERENCES Fogs (uuid) ON DELETE CASCADE,\n    FOREIGN KEY (edge_resource_id) REFERENCES EdgeResources (id) ON DELETE CASCADE\n);\n\nCREATE TABLE IF NOT EXISTS EdgeResourceOrchestrationTags (\n    id INT AUTO_INCREMENT PRIMARY KEY NOT NULL,\n    edge_resource_id INT,\n    tag_id INT,\n    FOREIGN KEY (edge_resource_id) REFERENCES EdgeResources (id) ON DELETE CASCADE,\n    FOREIGN KEY (tag_id) REFERENCES Tags (id) ON DELETE CASCADE\n);\n\nCREATE INDEX idx_agentedgeresources_fog_id ON AgentEdgeResources (fog_uuid);\nCREATE INDEX idx_agentedgeresources_edge_resource_id ON AgentEdgeResources (edge_resource_id);\nCREATE INDEX idx_edgeresourceorchestrationtags_edge_resource_id ON EdgeResourceOrchestrationTags (edge_resource_id);\nCREATE INDEX idx_edgeresourceorchestrationtags_tag_id ON EdgeResourceOrchestrationTags (tag_id);\n\nCREATE TABLE IF NOT EXISTS HTTPBasedResourceInterfaces (\n    id INT AUTO_INCREMENT PRIMARY KEY NOT NULL,\n    edge_resource_id INT,\n    FOREIGN KEY (edge_resource_id) REFERENCES EdgeResources (id) ON DELETE CASCADE\n);\n\nCREATE TABLE IF NOT EXISTS HTTPBasedResourceInterfaceEndpoints (\n    id INT AUTO_INCREMENT PRIMARY KEY NOT NULL,\n    interface_id INT,\n    name TEXT,\n    description TEXT,\n    `method` TEXT,\n    url TEXT,\n    requestType TEXT,\n    responseType TEXT,\n    requestPayloadExample TEXT,\n    responsePayloadExample TEXT,\n    FOREIGN KEY (interface_id) REFERENCES HTTPBasedResourceInterfaces (id) ON DELETE CASCADE\n);\n\nCREATE INDEX idx_httpbasedresourceinterfaces_edge_resource_id ON HTTPBasedResourceInterfaces (edge_resource_id);\nCREATE INDEX idx_httpbasedresourceinterfaceendpoints_interface_id ON HTTPBasedResourceInterfaceEndpoints (interface_id);\n\n\nCREATE TABLE IF NOT EXISTS ApplicationTemplates (\n    id INT AUTO_INCREMENT PRIMARY KEY NOT NULL,\n    name VARCHAR(255) UNIQUE NOT NULL DEFAULT 'new-application',\n    description VARCHAR(255) DEFAULT '',\n    schema_version VARCHAR(255) DEFAULT '',\n    application_json LONGTEXT,\n    created_at DATETIME,\n    updated_at DATETIME\n\n);\n\n\nCREATE TABLE IF NOT EXISTS ApplicationTemplateVariables (\n    id INT AUTO_INCREMENT PRIMARY KEY NOT NULL,\n    application_template_id INT NOT NULL,\n    `key` TEXT,\n    description VARCHAR(255) DEFAULT '',\n    default_value VARCHAR(255),\n    created_at DATETIME,\n    updated_at DATETIME,\n    FOREIGN KEY (application_template_id) REFERENCES ApplicationTemplates (id) ON DELETE CASCADE\n);\n\nCREATE INDEX idx_applicationtemplatevariables_application_template_id ON ApplicationTemplateVariables (application_template_id);\n\n\nCOMMIT;"),
	}
	filem := &embedded.EmbeddedFile{
		Filename:    "database/db_seeder_v1.0.0.sql",
		FileModTime: time.Unix(1712141950, 0),

		Content: string("START TRANSACTION;\n\nINSERT INTO Registries (url, is_public, secure, certificate, requires_cert, user_name, password, user_email)\nVALUES \n    ('registry.hub.docker.com', true, true, '', false, '', '', ''),\n    ('from_cache', true, true, '', false, '', '', '');\n   \n\nINSERT INTO CatalogItems (name, description, category, publisher, disk_required, ram_required, picture, config_example, is_public, registry_id)\nVALUES \n    ('Networking Tool', 'The built-in networking tool for Eclipse ioFog.', 'SYSTEM', 'Eclipse ioFog', 0, 0, 'none.png', NULL, false, 1),\n    ('RESTBlue', 'REST API for Bluetooth Low Energy layer.', 'SYSTEM', 'Eclipse ioFog', 0, 0, 'none.png', NULL, false, 1),\n    ('HAL', 'REST API for Hardware Abstraction layer.', 'SYSTEM', 'Eclipse ioFog', 0, 0, 'none.png', NULL, false, 1),\n    ('Diagnostics', '0', 'UTILITIES', 'Eclipse ioFog', 0, 0, 'images/build/580.png', NULL, true, 1),\n    ('Hello Web Demo', 'A simple web server to test Eclipse ioFog.', 'UTILITIES', 'Eclipse ioFog', 0, 0, 'images/build/4.png', NULL, true, 1),\n    ('Open Weather Map Data', 'A stream of data from the Open Weather Map API in JSON format', 'SENSORS', 'Eclipse ioFog', 0, 0, 'images/build/8.png', NULL, true, 1),\n    ('JSON REST API', 'A configurable REST API that gives JSON output', 'UTILITIES', 'Eclipse ioFog', 0, 0, 'images/build/49.png', NULL, true, 1),\n    ('Temperature Converter', 'A simple temperature format converter', 'UTILITIES', 'Eclipse ioFog', 0, 0, 'images/build/58.png', NULL, true, 1),\n    ('JSON Sub-Select', 'Performs sub-selection and transform operations on any JSON messages', 'UTILITIES', 'Eclipse ioFog', 0, 0, 'images/build/59.png', NULL, true, 1),\n    ('Humidity Sensor Simulator', 'Humidity Sensor Simulator for Eclipse ioFog', 'SIMULATOR', 'Eclipse ioFog', 0, 0, 'images/build/simulator.png', NULL, true, 1),\n    ('Seismic Sensor Simulator', 'Seismic Sensor Simulator for Eclipse ioFog', 'SIMULATOR', 'Eclipse ioFog', 0, 0, 'images/build/simulator.png', NULL, true, 1),\n    ('Temperature Sensor Simulator', 'Temperature Sensor Simulator for Eclipse ioFog', 'SIMULATOR', 'Eclipse ioFog', 0, 0, 'images/build/simulator.png', NULL, true, 1);\n\n   \nINSERT INTO FogTypes (id, name, image, description, network_catalog_item_id, hal_catalog_item_id, bluetooth_catalog_item_id)\nVALUES \n    (0, 'Unspecified', 'iointegrator0.png', 'Unspecified device. Fog Type will be selected on provision', 1, 3, 2),\n    (1, 'Standard Linux (x86)', 'iointegrator1.png', 'A standard Linux server of at least moderate processing power and capacity. Compatible with common Linux types such as Ubuntu, Red Hat, and CentOS.', 1, 3, 2),\n    (2, 'ARM Linux', 'iointegrator2.png', 'A version of ioFog meant to run on Linux systems with ARM processors. Microservices for this ioFog type will be tailored to ARM systems.', 1, 3, 2);\n\nUPDATE Fogs\nSET fog_type_id = 0\nWHERE fog_type_id IS NULL;\n   \n\nINSERT INTO CatalogItemImages (catalog_item_id, fog_type_id, container_image)\nVALUES \n    (1, 1, 'iofog/core-networking'),\n    (1, 2, 'iofog/core-networking-arm'),\n    (2, 1, 'iofog/restblue'),\n    (2, 2, 'iofog/restblue-arm'),\n    (3, 1, 'ghcr.io/datasance/hal'),\n    (3, 2, 'ghcr.io/datasance/hal-arm'),\n    (4, 1, 'iofog/diagnostics'),\n    (4, 2, 'iofog/diagnostics-arm'),\n    (5, 1, 'iofog/hello-web'),\n    (5, 2, 'iofog/hello-web-arm'),\n    (6, 1, 'iofog/open-weather-map'),\n    (6, 2, 'iofog/open-weather-map-arm'),\n    (7, 1, 'iofog/json-rest-api'),\n    (7, 2, 'iofog/json-rest-api-arm'),\n    (8, 1, 'iofog/temperature-conversion'),\n    (8, 2, 'iofog/temperature-conversion-arm'),\n    (9, 1, 'iofog/json-subselect'),\n    (9, 2, 'iofog/json-subselect-arm'),\n    (10, 1, 'iofog/humidity-sensor-simulator'),\n    (10, 2, 'iofog/humidity-sensor-simulator-arm'),\n    (11, 1, 'iofog/seismic-sensor-simulator'),\n    (11, 2, 'iofog/seismic-sensor-simulator-arm'),\n    (12, 1, 'iofog/temperature-sensor-simulator'),\n    (12, 2, 'iofog/temperature-sensor-simulator-arm');\n\nINSERT INTO CatalogItems (name, description, category, publisher, disk_required, ram_required, picture, config_example, is_public, registry_id)\nVALUES (\n    'Common Logging',\n    'Container which gathers logs and provides REST API for adding and querying logs from containers',\n    'UTILITIES',\n    'Eclipse ioFog',\n    0,\n    0,\n    'none.png',\n    '{\"access_tokens\": [\"Some_Access_Token\"], \"cleanfrequency\": \"1h40m\", \"ttl\": \"24h\"}',\n    false,\n    1\n);\n\nINSERT INTO CatalogItemImages (catalog_item_id, fog_type_id, container_image)\nVALUES \n    (LAST_INSERT_ID(), 1, 'iofog/common-logging'),\n    (LAST_INSERT_ID(), 2, 'iofog/common-logging-arm');\n   \n\nINSERT INTO CatalogItems (name, description, category, publisher, disk_required, ram_required, picture, config_example, is_public, registry_id)\nVALUES (\n    'JSON Generator',\n    'Container generates ioMessages with contentdata as complex JSON object.',\n    'UTILITIES',\n    'Eclipse ioFog',\n    0,\n    0,\n    'none.png',\n    '{}',\n    true,\n    1\n);\n\n\nINSERT INTO CatalogItemImages (catalog_item_id, fog_type_id, container_image)\nVALUES \n    (LAST_INSERT_ID(), 1, 'iofog/json-generator'),\n    (LAST_INSERT_ID(), 2, 'iofog/json-generator-arm');\n   \nUPDATE CatalogItems \nSET config_example = '{\"citycode\":\"5391997\",\"apikey\":\"6141811a6136148a00133488eadff0fb\",\"frequency\":1000}' \nWHERE name = 'Open Weather Map Data';\n\nUPDATE CatalogItems \nSET config_example = '{\"buffersize\":3,\"contentdataencoding\":\"utf8\",\"contextdataencoding\":\"utf8\",\"outputfields\":{\"publisher\":\"source\",\"contentdata\":\"temperature\",\"timestamp\":\"time\"}}' \nWHERE name = 'JSON REST API';\n\nUPDATE CatalogItems \nSET config_example = '{}' \nWHERE name = 'JSON Sub-Select';\n\nUPDATE CatalogItems \nSET is_public = true \nWHERE name = 'Common Logging';\n\n\nINSERT INTO CatalogItems (name, description, category, publisher, disk_required, ram_required, picture, config_example, is_public, registry_id)\nVALUES \n    ('Router', 'The built-in router for Datasance PoT.', 'SYSTEM', 'Eclipse ioFog', 0, 0, 'none.png', NULL, false, 1),\n    ('Proxy', 'The built-in proxy for Datasamce PoT.', 'SYSTEM', 'Eclipse ioFog', 0, 0, 'none.png', NULL, false, 1); \n\nSET @router_id = LAST_INSERT_ID();\nSET @proxy_id = LAST_INSERT_ID() + 1;\n\nINSERT INTO CatalogItemImages (catalog_item_id, fog_type_id, container_image)\nVALUES \n    (@router_id, 1, 'ghcr.io/datasance/router:3.1.1'),\n    (@router_id, 2, 'ghcr.io/datasance/router:3.1.1'),\n    (@proxy_id, 1, 'ghcr.io/datasance/proxy:3.0.1'),\n    (@proxy_id, 2, 'ghcr.io/datasance/proxy:3.0.1');\n    \nCOMMIT;"),
	}

	// define dirs
	dir1 := &embedded.EmbeddedDir{
		Filename:   "",
		DirModTime: time.Unix(1710969889, 0),
		ChildFiles: []*embedded.EmbeddedFile{},
	}
	dir2 := &embedded.EmbeddedDir{
		Filename:   "agent",
		DirModTime: time.Unix(1706547717, 0),
		ChildFiles: []*embedded.EmbeddedFile{
			file3, // "agent/check_prereqs.sh"
			file4, // "agent/init.sh"
			file5, // "agent/install_deps.sh"
			file6, // "agent/install_docker.sh"
			file7, // "agent/install_iofog.sh"
			file8, // "agent/install_java.sh"
			file9, // "agent/uninstall_iofog.sh"

		},
	}
	dira := &embedded.EmbeddedDir{
		Filename:   "controller",
		DirModTime: time.Unix(1681101988, 0),
		ChildFiles: []*embedded.EmbeddedFile{
			fileb, // "controller/check_prereqs.sh"
			filec, // "controller/install_iofog.sh"
			filed, // "controller/install_node.sh"
			filei, // "controller/set_env.sh"
			filej, // "controller/uninstall_iofog.sh"

		},
	}
	dire := &embedded.EmbeddedDir{
		Filename:   "controller/service",
		DirModTime: time.Unix(1681101988, 0),
		ChildFiles: []*embedded.EmbeddedFile{
			filef, // "controller/service/iofog-controller.initctl"
			fileg, // "controller/service/iofog-controller.systemd"
			fileh, // "controller/service/iofog-controller.update-rc"

		},
	}
	dirk := &embedded.EmbeddedDir{
		Filename:   "database",
		DirModTime: time.Unix(1710969998, 0),
		ChildFiles: []*embedded.EmbeddedFile{
			filel, // "database/db_migration_v1.0.0.sql"
			filem, // "database/db_seeder_v1.0.0.sql"

		},
	}

	// link ChildDirs
	dir1.ChildDirs = []*embedded.EmbeddedDir{
		dir2, // "agent"
		dira, // "controller"
		dirk, // "database"

	}
	dir2.ChildDirs = []*embedded.EmbeddedDir{}
	dira.ChildDirs = []*embedded.EmbeddedDir{
		dire, // "controller/service"

	}
	dire.ChildDirs = []*embedded.EmbeddedDir{}
	dirk.ChildDirs = []*embedded.EmbeddedDir{}

	// register embeddedBox
	embedded.RegisterEmbeddedBox(`../../assets`, &embedded.EmbeddedBox{
		Name: `../../assets`,
		Time: time.Unix(1710969889, 0),
		Dirs: map[string]*embedded.EmbeddedDir{
			"":                   dir1,
			"agent":              dir2,
			"controller":         dira,
			"controller/service": dire,
			"database":           dirk,
		},
		Files: map[string]*embedded.EmbeddedFile{
			"agent/check_prereqs.sh":                        file3,
			"agent/init.sh":                                 file4,
			"agent/install_deps.sh":                         file5,
			"agent/install_docker.sh":                       file6,
			"agent/install_iofog.sh":                        file7,
			"agent/install_java.sh":                         file8,
			"agent/uninstall_iofog.sh":                      file9,
			"controller/check_prereqs.sh":                   fileb,
			"controller/install_iofog.sh":                   filec,
			"controller/install_node.sh":                    filed,
			"controller/service/iofog-controller.initctl":   filef,
			"controller/service/iofog-controller.systemd":   fileg,
			"controller/service/iofog-controller.update-rc": fileh,
			"controller/set_env.sh":                         filei,
			"controller/uninstall_iofog.sh":                 filej,
			"database/db_migration_v1.0.0.sql":              filel,
			"database/db_seeder_v1.0.0.sql":                 filem,
		},
	})
}
